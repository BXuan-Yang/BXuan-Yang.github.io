(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{346:function(a,s,t){"use strict";t.r(s);var r=t(10),e=Object(r.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"spark与scala"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spark与scala"}},[a._v("#")]),a._v(" Spark与Scala")]),a._v(" "),s("h2",{attrs:{id:"spark"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spark"}},[a._v("#")]),a._v(" Spark")]),a._v(" "),s("ul",[s("li",[a._v("一个基于内存计算的开源的集群（分布式）计算系统")]),a._v(" "),s("li",[a._v("效率高于 Hadoop 。Job 中间输出的结果均保存在内存中，从而不再需要读写 HDFS，节省了磁盘IO 耗时")]),a._v(" "),s("li",[a._v("性能比 Hadoop 快约 100 倍")])]),a._v(" "),s("h2",{attrs:{id:"scala"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scala"}},[a._v("#")]),a._v(" Scala")]),a._v(" "),s("h3",{attrs:{id:"scala常用数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scala常用数据类型"}},[a._v("#")]),a._v(" Scala常用数据类型")]),a._v(" "),s("ul",[s("li",[a._v("数值类型")])]),a._v(" "),s("p",[a._v("Byte、Short、Int、Long、Float、Double")]),a._v(" "),s("ul",[s("li",[a._v("字符类型和字符串类型")])]),a._v(" "),s("p",[a._v("Char、String")]),a._v(" "),s("ul",[s("li",[a._v("Unit 类型")]),a._v(" "),s("li",[a._v("Nothing 类型")])]),a._v(" "),s("h3",{attrs:{id:"scala-变量申明和使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scala-变量申明和使用"}},[a._v("#")]),a._v(" Scala 变量申明和使用")]),a._v(" "),s("ul",[s("li",[a._v("使用 val 和 var 申明变量\n"),s("ul",[s("li",[a._v("val：常量")]),a._v(" "),s("li",[a._v("var：变量")])])])]),a._v(" "),s("h3",{attrs:{id:"scala-函数和方法的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scala-函数和方法的使用"}},[a._v("#")]),a._v(" Scala 函数和方法的使用")]),a._v(" "),s("ul",[s("li",[a._v("可以使用 Scala 的预定义函数")]),a._v(" "),s("li",[a._v("可以使用 def 关键字自定义函数")])]),a._v(" "),s("div",{staticClass:"language-scala extra-class"},[s("pre",{pre:!0,attrs:{class:"language-scala"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" 函数名称"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("参数列表：参数类型"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("返回值类型"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//函数体")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("ul",[s("li",[a._v("返回值类型可以省略")])]),a._v(" "),s("h3",{attrs:{id:"scala-的条件表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scala-的条件表达式"}},[a._v("#")]),a._v(" Scala 的条件表达式")]),a._v(" "),s("ul",[s("li",[a._v("if/else 语法结构和 Java、C++ 一样")]),a._v(" "),s("li",[a._v("Scala 中，if/else 是表达式，有值，这个值就是跟在 if 或 else 之后的表达式的值")])]),a._v(" "),s("h3",{attrs:{id:"scala-循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scala-循环"}},[a._v("#")]),a._v(" Scala 循环")]),a._v(" "),s("ul",[s("li",[a._v("Scala 拥有与 Java 和 C++ 相同的 while 和 do 循环")]),a._v(" "),s("li",[a._v("Scala 中，可以使用 for 和 foreach 进行迭代")])]),a._v(" "),s("h3",{attrs:{id:"scala-函数参数的求值策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scala-函数参数的求值策略"}},[a._v("#")]),a._v(" Scala 函数参数的求值策略")]),a._v(" "),s("ul",[s("li",[a._v("Scala 中，有两种函数参数的求值策略\n"),s("ul",[s("li",[a._v("Call By Value：对函数实参求值，且仅求一次")]),a._v(" "),s("li",[a._v("Call By Name：函数实参每次在函数体内被用到时都会求值")])])]),a._v(" "),s("li",[a._v("Scala 通常使用 Call By Value")]),a._v(" "),s("li",[a._v("如果函数的形参类型以 => 开头，那么就会使用 Call By Name")])]),a._v(" "),s("div",{staticClass:"language-scala extra-class"},[s("pre",{pre:!0,attrs:{class:"language-scala"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" x    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// Call By Value")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("=>")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" x    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// Call By Name")]),a._v("\n")])])]),s("h3",{attrs:{id:"scala-的-lazy-值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scala-的-lazy-值"}},[a._v("#")]),a._v(" Scala 的 Lazy 值")]),a._v(" "),s("p",[a._v("当 Scala 中的值被申明为 lazy 时，它的初始化将被推迟，直到我们首次对它取值")]),a._v(" "),s("h3",{attrs:{id:"scala-的异常处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scala-的异常处理"}},[a._v("#")]),a._v(" Scala 的异常处理")]),a._v(" "),s("p",[a._v("Scala 异常的工作机制和 Java 或者 C++ 一样")]),a._v(" "),s("h3",{attrs:{id:"scala-数组的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scala-数组的使用"}},[a._v("#")]),a._v(" Scala 数组的使用")]),a._v(" "),s("ul",[s("li",[a._v("Scala 数组的类型\n"),s("ul",[s("li",[a._v("定长数组")]),a._v(" "),s("li",[a._v("变长数组")])])]),a._v(" "),s("li",[a._v("使用 for 循环遍历数组或者数组缓冲")])]),a._v(" "),s("h3",{attrs:{id:"scala-数组的转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scala-数组的转换"}},[a._v("#")]),a._v(" Scala 数组的转换")]),a._v(" "),s("ul",[s("li",[a._v("Scala 中，从一个数组（或者数组缓冲）出发，以某种方式进行转换，从而产生一个全新的数组")])]),a._v(" "),s("div",{staticClass:"language-scala extra-class"},[s("pre",{pre:!0,attrs:{class:"language-scala"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("yield")]),a._v("\n")])])]),s("h3",{attrs:{id:"scala-数组的常用算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scala-数组的常用算法"}},[a._v("#")]),a._v(" Scala 数组的常用算法")]),a._v(" "),s("ul",[s("li",[a._v("使用 Scala 的内置函数来处理数组")])]),a._v(" "),s("h3",{attrs:{id:"scala-的多维数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scala-的多维数组"}},[a._v("#")]),a._v(" Scala 的多维数组")]),a._v(" "),s("ul",[s("li",[a._v("和 Java 一样，多维数组是通过数组的数组来实现的")])]),a._v(" "),s("div",{staticClass:"language-scala extra-class"},[s("pre",{pre:!0,attrs:{class:"language-scala"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" matrix "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" Array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("ofDim"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Double")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("ul",[s("li",[s("p",[a._v("可以创建不规则的数组，每一行的长度各不相同")])]),a._v(" "),s("li",[s("p",[a._v("Scala 数组是使用 Java 数组来实现的，我们可以在 Java 和 Scala 之间来回传递")])])]),a._v(" "),s("h3",{attrs:{id:"scala-映射和元组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scala-映射和元组"}},[a._v("#")]),a._v(" Scala 映射和元组")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("映射：Maps")]),a._v(" "),s("ul",[s("li",[a._v("映射 Map 是 n=2 个对象的聚集")])])]),a._v(" "),s("li",[s("p",[a._v("元组：Tuples")]),a._v(" "),s("ul",[s("li",[a._v("元组 Tuples 是 n 个对象的一个聚集，里面的内容不需要都是相同的类型")])])])]),a._v(" "),s("h3",{attrs:{id:"构造映射的语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构造映射的语法"}},[a._v("#")]),a._v(" 构造映射的语法")]),a._v(" "),s("p",[a._v("在 Scala 中，Map 是对偶（键值对）的集合；")]),a._v(" "),s("ul",[s("li",[a._v("-> 操作符来创建对偶")])]),a._v(" "),s("div",{staticClass:"language-scala extra-class"},[s("pre",{pre:!0,attrs:{class:"language-scala"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" scores "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" Map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Alice"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Bob"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Cindy"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[a._v("映射的操作：")]),a._v(" "),s("ul",[s("li",[a._v("获取映射中的值")]),a._v(" "),s("li",[a._v("更新映射中的值")]),a._v(" "),s("li",[a._v("迭代映射")]),a._v(" "),s("li",[a._v("与 Java 的互操作")])]),a._v(" "),s("h3",{attrs:{id:"scala-中的元组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scala-中的元组"}},[a._v("#")]),a._v(" Scala 中的元组")]),a._v(" "),s("ul",[s("li",[a._v("元组是不同类型的值的聚集")])]),a._v(" "),s("div",{staticClass:"language-scala extra-class"},[s("pre",{pre:!0,attrs:{class:"language-scala"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" t "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3.14")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Fred"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 类型为 Tuple3[Int, Double, Java.lang.String]")]),a._v("\n")])])]),s("h2",{attrs:{id:"面向对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面向对象"}},[a._v("#")]),a._v(" 面向对象")]),a._v(" "),s("p",[a._v("将数据及对数据的操作方法放在一起，作为一个相互依存的整体，即是对象")]),a._v(" "),s("p",[a._v("面向对象的三大特征：")]),a._v(" "),s("ul",[s("li",[a._v("封装")]),a._v(" "),s("li",[a._v("继承")]),a._v(" "),s("li",[a._v("多态")])]),a._v(" "),s("h3",{attrs:{id:"类的定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类的定义"}},[a._v("#")]),a._v(" 类的定义")]),a._v(" "),s("ul",[s("li",[a._v("简单类和无参方法")])]),a._v(" "),s("div",{staticClass:"language-scala extra-class"},[s("pre",{pre:!0,attrs:{class:"language-scala"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" Counter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" value "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" increment"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t\tvalue "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" current"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("ul",[s("li",[a._v("属性的 getter 和 setter 方法")]),a._v(" "),s("li",[a._v("对象的私有字段")]),a._v(" "),s("li",[a._v("嵌套类")])]),a._v(" "),s("h3",{attrs:{id:"类的构造器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类的构造器"}},[a._v("#")]),a._v(" 类的构造器")]),a._v(" "),s("ul",[s("li",[a._v("主构造器")]),a._v(" "),s("li",[a._v("辅助构造器")])]),a._v(" "),s("h3",{attrs:{id:"scala-的-object-对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scala-的-object-对象"}},[a._v("#")]),a._v(" Scala 的 Object 对象")]),a._v(" "),s("ul",[s("li",[a._v("Scala 没有静态的修饰符，但 Object 对象下的成员都是静态的，如果有同名的 class，将其作为它的伴生类。在 Object 中一般可以为伴生类做一些初始化的操作")]),a._v(" "),s("li",[a._v("Object 对象的应用\n"),s("ul",[s("li",[a._v("单例对象")]),a._v(" "),s("li",[a._v("使用应用程序对象")])])])]),a._v(" "),s("h3",{attrs:{id:"scala-中的-apply-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scala-中的-apply-方法"}},[a._v("#")]),a._v(" Scala 中的 apply 方法")]),a._v(" "),s("ul",[s("li",[a._v("遇到如下形式的表达式，apply 方法就会被调用：")])]),a._v(" "),s("div",{staticClass:"language-scala extra-class"},[s("pre",{pre:!0,attrs:{class:"language-scala"}},[s("code",[a._v("Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("参数"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" 参数"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[a._v("通常，这样一个 apply 方法返回的是伴生类的对象；作用是为了省略 new 关键字")]),a._v(" "),s("h3",{attrs:{id:"scala-中的继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scala-中的继承"}},[a._v("#")]),a._v(" Scala 中的继承")]),a._v(" "),s("p",[a._v("什么是继承？Scala 中的继承和 java 中的继承一样，使用 extends 关键字扩展类")]),a._v(" "),s("ul",[s("li",[a._v("重写方法")]),a._v(" "),s("li",[a._v("匿名子类")]),a._v(" "),s("li",[a._v("抽象类")])]),a._v(" "),s("h2",{attrs:{id:"scala-函数式编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scala-函数式编程"}},[a._v("#")]),a._v(" Scala 函数式编程")]),a._v(" "),s("p",[a._v("在 Scala 中，函数和数字一样，可以在变量中存放函数：")]),a._v(" "),s("div",{staticClass:"language-scala extra-class"},[s("pre",{pre:!0,attrs:{class:"language-scala"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("scala"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),a._v("_\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3.14")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" fun "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" ceil"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("_\n")])])]),s("p",[a._v("即是：将函数作为变量的值")]),a._v(" "),s("h3",{attrs:{id:"匿名函数和带函数参数的函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#匿名函数和带函数参数的函数"}},[a._v("#")]),a._v(" 匿名函数和带函数参数的函数")]),a._v(" "),s("ul",[s("li",[a._v("匿名函数\n"),s("ul",[s("li",[a._v("在 Scala 中，不需要给每一个函数命名，正如不用给每个数字命名一样。")])])]),a._v(" "),s("li",[a._v("带函数参数的函数\n"),s("ul",[s("li",[a._v("在 Scala 中，可以将一个函数作为另外一个函数的参数。")])])])]),a._v(" "),s("h3",{attrs:{id:"闭包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[a._v("#")]),a._v(" 闭包")]),a._v(" "),s("p",[a._v("类似于函数的嵌套，在一个函数定义中，包含另外一个函数的定义")]),a._v(" "),s("h3",{attrs:{id:"柯里化-currrying"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#柯里化-currrying"}},[a._v("#")]),a._v(" 柯里化 Currrying")]),a._v(" "),s("p",[a._v("柯里化函数（Currying Function）是把具有多个参数的函数转换成一条函数链，每个节点上是单一参数")]),a._v(" "),s("div",{staticClass:"language-scala extra-class"},[s("pre",{pre:!0,attrs:{class:"language-scala"}},[s("code",[a._v("以下两个 add 函数定义是等价的\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" add"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" y"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" y\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" add"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("y"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" y "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// Scala柯里化的语法")]),a._v("\n")])])]),s("h3",{attrs:{id:"高阶函数示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高阶函数示例"}},[a._v("#")]),a._v(" 高阶函数示例")]),a._v(" "),s("p",[a._v("![image-20230726102152798](D:\\Download software\\newTypora\\images\\image-20230726102152798.png)")]),a._v(" "),s("p",[a._v("![image-20230726102259656](D:\\Download software\\newTypora\\images\\image-20230726102259656.png)")]),a._v(" "),s("h2",{attrs:{id:"scala-函数式编程进阶"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scala-函数式编程进阶"}},[a._v("#")]),a._v(" Scala 函数式编程进阶")]),a._v(" "),s("h3",{attrs:{id:"集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#集合"}},[a._v("#")]),a._v(" 集合")]),a._v(" "),s("ul",[s("li",[a._v("可变集合")]),a._v(" "),s("li",[a._v("不可变集合\n"),s("ul",[s("li",[a._v("集合从不改变，因此可以安全地共享其引用。")]),a._v(" "),s("li",[a._v("在一个多线程的应用程序当中也是没问题的。")])])])]),a._v(" "),s("h3",{attrs:{id:"列表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#列表"}},[a._v("#")]),a._v(" 列表")]),a._v(" "),s("ul",[s("li",[a._v("不可变列表（List）")]),a._v(" "),s("li",[a._v("可变列表（LinkedList）")])]),a._v(" "),s("h3",{attrs:{id:"序列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#序列"}},[a._v("#")]),a._v(" 序列")]),a._v(" "),s("p",[a._v("常用的序列：Vector、Range")]),a._v(" "),s("ul",[s("li",[a._v("Vector：是 ArrayBuffer 的不可变版本，是一个带下标的序列")]),a._v(" "),s("li",[a._v("Range：表示一个整数序列")])]),a._v(" "),s("h3",{attrs:{id:"集和集的操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#集和集的操作"}},[a._v("#")]),a._v(" 集和集的操作")]),a._v(" "),s("ul",[s("li",[a._v("集 Set 是不重复元素的集合")]),a._v(" "),s("li",[a._v("集和列表不同，它不保证元素插入的顺序。默认以 Hash 集实现")])]),a._v(" "),s("h3",{attrs:{id:"模式匹配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模式匹配"}},[a._v("#")]),a._v(" 模式匹配")]),a._v(" "),s("p",[a._v("Scala 有一个强大的模式匹配机制，可以应用在很多场合：")]),a._v(" "),s("ul",[s("li",[a._v("switch 语句")]),a._v(" "),s("li",[a._v("类型检查")]),a._v(" "),s("li",[a._v("Scala的守卫")]),a._v(" "),s("li",[a._v("模式匹配中的变量")]),a._v(" "),s("li",[a._v("匹配数组和列表")])]),a._v(" "),s("p",[a._v("Scala 还提供了样本类（case class），对模式匹配进行了优化")]),a._v(" "),s("h3",{attrs:{id:"什么是-case-class"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-case-class"}},[a._v("#")]),a._v(" 什么是 Case Class")]),a._v(" "),s("p",[a._v("Scala 的 case class 就是在普通的类定义前加 case 这个关键字，然后你可以对这些类来进行模式匹配")]),a._v(" "),s("p",[a._v("case class 带来的最大的好处是它们支持模式识别")])])}),[],!1,null,null,null);s.default=e.exports}}]);