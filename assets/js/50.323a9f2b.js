(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{328:function(t,a,s){"use strict";s.r(a);var n=s(10),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"java-集合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-集合"}},[t._v("#")]),t._v(" Java 集合")]),t._v(" "),a("h2",{attrs:{id:"java-集合概览"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-集合概览"}},[t._v("#")]),t._v(" Java 集合概览")]),t._v(" "),a("p",[t._v("Java 集合， 也叫作容器，主要是由两大接口派生而来：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("一个是 "),a("code",[t._v("Collection")]),t._v("接口，主要用于存放单一元素；")])]),t._v(" "),a("li",[a("p",[t._v("一个是 "),a("code",[t._v("Map")]),t._v(" 接口，主要用于存放 key-value 键值对。")])])]),t._v(" "),a("p",[t._v("对于"),a("code",[t._v("Collection")]),t._v(" 接口，下面又有三个主要的子接口："),a("code",[t._v("List")]),t._v("、"),a("code",[t._v("Set")]),t._v(" 和 "),a("code",[t._v("Queue")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"说说-list-set-queue-map-四者的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说说-list-set-queue-map-四者的区别"}},[t._v("#")]),t._v(" 说说 List, Set, Queue, Map 四者的区别？")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("List")]),t._v("(有序的):：存储的元素是有序的、可重复的。")]),t._v(" "),a("li",[a("code",[t._v("Set")]),t._v("(不重复的)：存储的元素是无序的、不可重复的。")]),t._v(" "),a("li",[a("code",[t._v("Queue")]),t._v("(排队)：按特定的排队规则来确定先后顺序，存储的元素是有序的、可重复的。")]),t._v(" "),a("li",[a("code",[t._v("Map")]),t._v('(key - value)：使用键值对（key-value）存储，类似于数学上的函数 y=f(x)，"x" 代表 key，"y" 代表 value，key 是无序的、不可重复的，value 是无序的、可重复的，每个键最多映射到一个值。')])]),t._v(" "),a("h3",{attrs:{id:"list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[t._v("#")]),t._v(" List")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("ArrayList")]),t._v("： "),a("code",[t._v("Object[]")]),t._v(" 数组")]),t._v(" "),a("li",[a("code",[t._v("Vector")]),t._v("："),a("code",[t._v("Object[]")]),t._v(" 数组")]),t._v(" "),a("li",[a("code",[t._v("LinkedList")]),t._v("： 双向链表(JDK1.6 之前为循环链表，JDK1.7 取消了循环)")])]),t._v(" "),a("h3",{attrs:{id:"set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[t._v("#")]),t._v(" Set")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("HashSet")]),t._v("(无序，唯一): 基于 "),a("code",[t._v("HashMap")]),t._v(" 实现的，底层采用 "),a("code",[t._v("HashMap")]),t._v(" 来保存元素")]),t._v(" "),a("li",[a("code",[t._v("LinkedHashSet")]),t._v(": "),a("code",[t._v("LinkedHashSet")]),t._v(" 是 "),a("code",[t._v("HashSet")]),t._v(" 的子类，并且其内部是通过 "),a("code",[t._v("LinkedHashMap")]),t._v(" 来实现的。有点类似于我们之前说的 "),a("code",[t._v("LinkedHashMap")]),t._v(" 其内部是基于 "),a("code",[t._v("HashMap")]),t._v(" 实现一样，不过还是有一点点区别的")]),t._v(" "),a("li",[a("code",[t._v("TreeSet")]),t._v("(有序，唯一): 红黑树(自平衡的排序二叉树)")])]),t._v(" "),a("h3",{attrs:{id:"queue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#queue"}},[t._v("#")]),t._v(" Queue")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("PriorityQueue")]),t._v(": "),a("code",[t._v("Object[]")]),t._v(" 数组来实现二叉堆")]),t._v(" "),a("li",[a("code",[t._v("ArrayQueue")]),t._v(": "),a("code",[t._v("Object[]")]),t._v(" 数组 + 双指针")])]),t._v(" "),a("h3",{attrs:{id:"map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[t._v("#")]),t._v(" Map")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("HashMap")]),t._v("： JDK1.8 之前 "),a("code",[t._v("HashMap")]),t._v(" 由 数组+链表 组成的，数组是 "),a("code",[t._v("HashMap")]),t._v(" 的主体，链表则是主要为了解决哈希冲突而存在的（使用 “拉链法” 解决冲突）。JDK1.8 以后在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间")]),t._v(" "),a("li",[a("code",[t._v("LinkedHashMap")]),t._v("： "),a("code",[t._v("LinkedHashMap")]),t._v(" 继承自 "),a("code",[t._v("HashMap")]),t._v("，所以它的底层仍然是基于拉链式散列结构即由数组和链表或红黑树组成。另外，"),a("code",[t._v("LinkedHashMap")]),t._v(" 在上面结构的基础上，增加了一条 "),a("strong",[t._v("双向链表")]),t._v("，使得上面的结构可以保持键值对的插入顺序。同时通过对链表进行相应的操作，实现了访问顺序相关逻辑。")]),t._v(" "),a("li",[a("code",[t._v("Hashtable")]),t._v("： 数组+链表组成的，数组是 "),a("code",[t._v("Hashtable")]),t._v(" 的主体，链表则是主要为了解决哈希冲突而存在的，虽然线程是安全的，但是效率较低。")]),t._v(" "),a("li",[a("code",[t._v("TreeMap")]),t._v("： 红黑树（自平衡的排序二叉树）")])]),t._v(" "),a("h2",{attrs:{id:"集合和数组有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集合和数组有什么区别"}},[t._v("#")]),t._v(" 集合和数组有什么区别？")]),t._v(" "),a("p",[t._v("数组一旦声明长度之后就不可变，同时数组的数据类型也决定了该数组存储的数据的类型，数组存储的数据是有序的、可重复的、单一的；")]),t._v(" "),a("p",[t._v("集合提高了灵活性，不仅可以用来存储不同类型的对象，还可以保存具有映射关系的数据。")]),t._v(" "),a("h2",{attrs:{id:"list-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list-2"}},[t._v("#")]),t._v(" List")]),t._v(" "),a("h3",{attrs:{id:"arraylist-简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arraylist-简介"}},[t._v("#")]),t._v(" ArrayList 简介")]),t._v(" "),a("p",[t._v("ArrayList 的底层是"),a("strong",[t._v("数组队列")]),t._v("，相当于动态数组。")]),t._v(" "),a("p",[t._v("与 Java 中的数组相比，它的容量能动态增长。在添加大量元素前，应用程序可以使用 "),a("code",[t._v("ensureCapacity")]),t._v(" 操作来增加 "),a("code",[t._v("ArrayList")]),t._v(" 实例的容量。这可以减少递增式再分配的数量。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/BXuan-Yang/blogImage/img/image-20230315090802100.png",alt:"image-20230315090802100"}})]),t._v(" "),a("p",[a("code",[t._v("ArrayList")]),t._v("继承于 "),a("strong",[a("code",[t._v("AbstractList")])]),t._v(" ，实现了 "),a("strong",[a("code",[t._v("List")])]),t._v(", "),a("strong",[a("code",[t._v("RandomAccess")])]),t._v(", "),a("strong",[a("code",[t._v("Cloneable")])]),t._v(", "),a("strong",[a("code",[t._v("java.io.Serializable")])]),t._v(" 这些接口。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/BXuan-Yang/blogImage/img/image-20230315090704667.png",alt:"image-20230315090704667"}})]),t._v(" "),a("ul",[a("li",[a("code",[t._v("RandomAccess")]),t._v(" 是一个标志接口，表明实现这个这个接口的 List 集合是支持"),a("strong",[t._v("快速随机访问")]),t._v("的。在 "),a("code",[t._v("ArrayList")]),t._v(" 中，我们即可以通过元素的序号快速获取元素对象，这就是快速随机访问。")]),t._v(" "),a("li",[a("code",[t._v("ArrayList")]),t._v(" 实现了 "),a("strong",[a("code",[t._v("Cloneable")]),t._v(" 接口")]),t._v(" ，即覆盖了函数"),a("code",[t._v("clone()")]),t._v("，能被克隆。")]),t._v(" "),a("li",[a("code",[t._v("ArrayList")]),t._v(" 实现了 "),a("code",[t._v("java.io.Serializable")]),t._v("接口，这意味着"),a("code",[t._v("ArrayList")]),t._v("支持序列化，能通过序列化去传输。")])]),t._v(" "),a("h3",{attrs:{id:"arraylist-和-vector-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arraylist-和-vector-的区别"}},[t._v("#")]),t._v(" Arraylist 和 Vector 的区别?")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("ArrayList")]),t._v(" 是 "),a("code",[t._v("List")]),t._v(" 的主要实现类，底层使用 "),a("code",[t._v("Object[]")]),t._v("存储，适用于频繁的查找工作，线程不安全 ；")]),t._v(" "),a("li",[a("code",[t._v("Vector")]),t._v(" 是 "),a("code",[t._v("List")]),t._v(" 的古老实现类，底层使用 "),a("code",[t._v("Object[]")]),t._v("存储，线程安全的。")])]),t._v(" "),a("h3",{attrs:{id:"arraylist-与-linkedlist-区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arraylist-与-linkedlist-区别"}},[t._v("#")]),t._v(" Arraylist 与 LinkedList 区别?")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("是否保证线程安全：")]),t._v(" "),a("code",[t._v("ArrayList")]),t._v(" 和 "),a("code",[t._v("LinkedList")]),t._v(" 都是不同步的，也就是不保证线程安全；")]),t._v(" "),a("li",[a("strong",[t._v("底层数据结构：")]),t._v(" "),a("code",[t._v("Arraylist")]),t._v(" 底层使用的是 "),a("strong",[a("code",[t._v("Object")]),t._v(" 数组")]),t._v("；"),a("code",[t._v("LinkedList")]),t._v(" 底层使用的是 "),a("strong",[t._v("双向链表")]),t._v(" 数据结构（JDK1.6 之前为循环链表，JDK1.7 取消了循环。）")]),t._v(" "),a("li",[a("strong",[t._v("插入和删除是否受元素位置的影响：")]),t._v(" ① "),a("strong",[a("code",[t._v("ArrayList")]),t._v(" 采用数组存储，所以插入和删除元素的时间复杂度受元素位置的影响。")]),t._v(" 比如：执行"),a("code",[t._v("add(E e)")]),t._v("方法的时候， "),a("code",[t._v("ArrayList")]),t._v(" 会默认在将指定的元素追加到此列表的末尾，这种情况时间复杂度就是 O(1)。但是如果要在指定位置 i 插入和删除元素的话（"),a("code",[t._v("add(int index, E element)")]),t._v("）时间复杂度就为 O(n-i)。因为在进行上述操作的时候集合中第 i 和第 i 个元素之后的(n-i)个元素都要执行向后位/向前移一位的操作。 ② "),a("strong",[a("code",[t._v("LinkedList")]),t._v(" 采用链表存储，所以对于"),a("code",[t._v("add(E e)")]),t._v("方法的插入，删除元素时间复杂度不受元素位置的影响，近似 O(1)，如果是要在指定位置"),a("code",[t._v("i")]),t._v("插入和删除元素的话（"),a("code",[t._v("(add(int index, E element)")]),t._v("） 时间复杂度近似为"),a("code",[t._v("o(n))")]),t._v("因为需要先移动到指定位置再插入。")])]),t._v(" "),a("li",[a("strong",[t._v("是否支持快速随机访问：")]),t._v(" "),a("code",[t._v("LinkedList")]),t._v(" 不支持高效的随机元素访问，而 "),a("code",[t._v("ArrayList")]),t._v(" 支持。快速随机访问就是通过元素的序号快速获取元素对象(对应于"),a("code",[t._v("get(int index)")]),t._v("方法)。")]),t._v(" "),a("li",[a("strong",[t._v("内存空间占用：")]),t._v(" "),a("code",[t._v("ArrayList")]),t._v(" 的空 间浪费主要体现在在 list 列表的结尾会预留一定的容量空间，而 "),a("code",[t._v("LinkedList")]),t._v(" 的空间花费则体现在它的每一个元素都需要消耗比 "),a("code",[t._v("ArrayList")]),t._v(" 更多的空间（因为要存放直接后继和直接前驱以及数据）")])]),t._v(" "),a("h3",{attrs:{id:"arraylist-构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arraylist-构造函数"}},[t._v("#")]),t._v(" ArrayList 构造函数")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 默认初始容量大小\n     */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DEFAULT_CAPACITY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DEFAULTCAPACITY_EMPTY_ELEMENTDATA")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     *默认构造函数，使用初始容量10构造一个空列表(无参数构造)\n     */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elementData "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DEFAULTCAPACITY_EMPTY_ELEMENTDATA")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 带初始容量参数的构造函数。（用户自己指定容量）\n     */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" initialCapacity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("initialCapacity "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//初始容量大于0")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//创建initialCapacity大小的数组")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elementData "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("initialCapacity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("initialCapacity "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//初始容量等于0")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//创建空数组")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elementData "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("EMPTY_ELEMENTDATA")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//初始容量小于0，抛出异常")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IllegalArgumentException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Illegal Capacity: "')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n                                               initialCapacity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n    *构造包含指定collection元素的列表，这些元素利用该集合的迭代器按顺序返回\n    *如果指定的集合为null，throws NullPointerException。\n    */")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collection")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        elementData "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" elementData"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// c.toArray might (incorrectly) not return Object[] (see 6260652)")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("elementData"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                elementData "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("copyOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("elementData"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// replace with empty array.")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elementData "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("EMPTY_ELEMENTDATA")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n")])])]),a("p",[t._v("以无参数构造方法创建 "),a("code",[t._v("ArrayList")]),t._v(" 时，实际上初始化赋值的是一个空数组。当真正对数组进行添加元素操作时，才真正分配容量。即向数组中添加第一个元素时，数组容量扩为 10。")]),t._v(" "),a("blockquote",[a("p",[t._v("补充：JDK 6 new 无参构造的 "),a("code",[t._v("ArrayList")]),t._v(" 对象时，直接创建了长度是 10 的 "),a("code",[t._v("Object[]")]),t._v(" 数组 elementData")])]),t._v(" "),a("h3",{attrs:{id:"arraylist-扩容机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arraylist-扩容机制"}},[t._v("#")]),t._v(" ArrayList 扩容机制")]),t._v(" "),a("p",[t._v("初始创建的时候创建的是一个空的数组，等到第一个元素开始插入的时候才会对数组进行初始化，初始化容量为10。以后的扩容都是 "),a("strong",[t._v("1.5倍")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" newCapacity "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" oldCapacity "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldCapacity "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("这里区分一下 length、length()、size()：")]),t._v(" "),a("ul",[a("li",[t._v("java 中的 "),a("code",[t._v("length")]),t._v("属性是针对数组说的,比如说你声明了一个数组,想知道这个数组的长度就会用到了 length 这个属性.")]),t._v(" "),a("li",[t._v("java 中的 "),a("code",[t._v("length()")]),t._v(" 方法是针对字符串说的,如果想看这个字符串的长度则用到 "),a("code",[t._v("length()")]),t._v(" 这个方法.")]),t._v(" "),a("li",[t._v("java 中的 "),a("code",[t._v("size()")]),t._v(" 方法是针对泛型集合说的,如果想看这个泛型有多少个元素,就调用此方法来查看。")])]),t._v(" "),a("h3",{attrs:{id:"system-arraycopy-和-arrays-copyof-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#system-arraycopy-和-arrays-copyof-方法"}},[t._v("#")]),t._v(" System.arraycopy() 和 Arrays.copyOf()方法")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 我们发现 arraycopy 是一个 native 方法,接下来我们解释一下各个参数的具体意义")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n    *   复制数组\n    * @param src 源数组\n    * @param srcPos 源数组中的起始位置\n    * @param dest 目标数组\n    * @param destPos 目标数组中的起始位置\n    * @param length 要复制的数组元素的数量\n    */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("native")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("arraycopy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" src"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("  srcPos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" dest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" destPos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("copyOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" original"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" newLength"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 申请一个新的数组")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" copy "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("newLength"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用System.arraycopy,将源数组中的数据进行拷贝,并返回新的数组")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("arraycopy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("original"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                         "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Math")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("min")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("original"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newLength"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"queue-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#queue-2"}},[t._v("#")]),t._v(" Queue")]),t._v(" "),a("h3",{attrs:{id:"简单描述一下-priorityqueue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单描述一下-priorityqueue"}},[t._v("#")]),t._v(" 简单描述一下 PriorityQueue？")]),t._v(" "),a("p",[t._v("PriorityQueue 是在 JDK 1.5 被引入的，它与 Queue 的区别在于元素出队顺序都是与优先级相关的，即总是优先级最高的元素先出队。")]),t._v(" "),a("ul",[a("li",[t._v("PriorityQueue 利用了 "),a("strong",[t._v("二叉堆")]),t._v(" 的数据结构来实现，底层使用可变长的数组来存储数据；")]),t._v(" "),a("li",[t._v("PriorityQueue 通过堆元素的上浮和下沉，实现了在 O(logn) 的时间复杂度内插入元素和删除堆顶的元素；")]),t._v(" "),a("li",[t._v("PriorityQueue 是非线程安全的，并且不支持 null 和 non-comparable 的对象")]),t._v(" "),a("li",[t._v("PriorityQueue 默认是小顶堆，但是可以接收一个 Compare 作为构造参数，从而来自定义元素优先级的先后")])]),t._v(" "),a("h2",{attrs:{id:"map-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map-2"}},[t._v("#")]),t._v(" Map")]),t._v(" "),a("h3",{attrs:{id:"hashmap底层实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap底层实现"}},[t._v("#")]),t._v(" HashMap底层实现？")]),t._v(" "),a("h4",{attrs:{id:"在-jdk1-8-之前"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在-jdk1-8-之前"}},[t._v("#")]),t._v(" 在 JDK1.8 之前")]),t._v(" "),a("p",[t._v("HashMap 的底层是 数组＋链表，也就是链表散列。Hash 通过 key 的 hashcode 经过扰动函数之后得到 hash 值，然后通过 (n -1)&hash，判断当前元素存放的位置。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/BXuan-Yang/blogImage/img/image-20230419102040230.png",alt:"image-20230419102040230"}})]),t._v(" "),a("ul",[a("li",[t._v("如果当前位置不存在元素，直接进行存放。")]),t._v(" "),a("li",[t._v("如果当前位置存在元素，先判断该元素和将要存入的元素是否一致，如果一致则覆盖；如果不一致，需要使用拉链法解决冲突。")])]),t._v(" "),a("p",[a("strong",[t._v("扰动函数（hash方法）：")])]),t._v(" "),a("p",[t._v("JDK 1.7")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" h"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This function ensures that hashCodes that differ only by")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// constant multiples at each bit position have a bounded")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// number of collisions (approximately 8 at default load factor).")]),t._v("\n\n    h "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" h "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("JDK 1.8")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" h"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// key.hashCode()：返回散列值也就是hashcode")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ^ ：按位异或")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// >>>:无符号右移，忽略符号位，空位都以0补齐")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hashCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("什么是"),a("strong",[t._v("拉链法")]),t._v("？")]),t._v(" "),a("p",[t._v("拉链法：将链表和数组相结合。也就是说创建一个链表数组，数组中每一格就是一个链表。若遇到哈希冲突，则将冲突的值加到链表中即可。")]),t._v(" "),a("h4",{attrs:{id:"在jdk-1-8之后"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在jdk-1-8之后"}},[t._v("#")]),t._v(" 在JDK 1.8之后")]),t._v(" "),a("p",[t._v("解决哈希冲突有了变化，当链表长度大于阈值（"),a("a",{attrs:{href:"https://blog.csdn.net/Liu_Wd/article/details/108052428",target:"_blank",rel:"noopener noreferrer"}},[t._v("默认阈值为8"),a("OutboundLink")],1),t._v("），会将链表转换成红黑树，以减少搜索时间")]),t._v(" "),a("p",[t._v("（注意：这里将链表转换成红黑树时会进行判断，如果当前数组的长度小于64的话，首先选择对数组进行扩容（变成原来的2倍），而不是直接转换成红黑树）")]),t._v(" "),a("h3",{attrs:{id:"hashmap的长度为什么是2的幂次方"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap的长度为什么是2的幂次方"}},[t._v("#")]),t._v(" HashMap的长度为什么是2的幂次方？")]),t._v(" "),a("p",[t._v("这是为了让HashMap存取高效，尽量减少碰撞，也就是要将数据分配均匀。")]),t._v(" "),a("p",[t._v("**取余(%)操作中如果除数是 2 的幂次则等价于与其除数减一的与(&)操作（也就是说 hash%length==hash&(length-1)的前提是 length 是 2 的 n 次方；）。**并且 "),a("strong",[t._v("采用二进制位操作 &，相对于%能够提高运算效率，这就解释了 HashMap 的长度为什么是 2 的幂次方")])]),t._v(" "),a("h3",{attrs:{id:"hashmap和hashtable的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap和hashtable的区别"}},[t._v("#")]),t._v(" HashMap和Hashtable的区别")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("线程是否安全")]),t._v("：Hashtable 内部的方法基本是经过synchornized 修饰的，所以 Hashtable 是线程安全的。但是 HashMap 是非线程安全的。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("效率")]),t._v("：因为线程安全的问题，HashMap 要比Hashtable 效率更高一点。所以在基本开发中Hashtable很少使用")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("对于 null key 和 null value 的支持")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("HashMap 可以存储 null 的 key 和 value，但是作为 key 为 null 的只能有一个，但是 value 可以有多个。")]),t._v(" "),a("li",[t._v("Hashtable 不允许有 null 的 key 和 value 出现，否则会报 NullPointerException。")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("初始化容量和每次扩充容量的大小不同")]),t._v("：如果在创建时不指定初始值，Hashtable 默认的初始大小为11，每次扩容，容量变成原来的 2n+1。HashMap 默认的容量初始值为 16，每次扩容，容量变成原来的2倍。如果在创建时指定了初始值，那么 Hashtable 会使用制定的容量，而 HashMap 会将其自动向上扩容到2的幂次数倍。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("底层数据结构")]),t._v("：JDK1.8 以后的 "),a("code",[t._v("HashMap")]),t._v(" 在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）时，将链表转化为红黑树（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树），以减少搜索时间。"),a("code",[t._v("Hashtable")]),t._v(" 没有这样的机制。")])])]),t._v(" "),a("h3",{attrs:{id:"hashmap和hashset的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap和hashset的区别"}},[t._v("#")]),t._v(" HashMap和HashSet的区别")]),t._v(" "),a("p",[t._v("HashSet是基于HashMap实现的，所以只有 writeObject()、readObject()、clone()是HashSet自己实现的之外，其他的都是直接调用HashMap中的方法。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[a("code",[t._v("HashMap")])]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[a("code",[t._v("HashSet")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("实现了 "),a("code",[t._v("Map")]),t._v(" 接口")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("实现 "),a("code",[t._v("Set")]),t._v(" 接口")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("存储键值对")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("仅存储对象")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("调用 "),a("code",[t._v("put()")]),t._v("向 map 中添加元素")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("调用 "),a("code",[t._v("add()")]),t._v("方法向 "),a("code",[t._v("Set")]),t._v(" 中添加元素")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("HashMap")]),t._v(" 使用键（Key）计算 "),a("code",[t._v("hashcode")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("HashSet")]),t._v(" 使用成员对象来计算 "),a("code",[t._v("hashcode")]),t._v(" 值，对于两个对象来说 "),a("code",[t._v("hashcode")]),t._v(" 可能相同，所以"),a("code",[t._v("equals()")]),t._v("方法用来判断对象的相等性")])])])]),t._v(" "),a("h3",{attrs:{id:"hashmap和treemap的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap和treemap的区别"}},[t._v("#")]),t._v(" HashMap和TreeMap的区别")]),t._v(" "),a("p",[t._v("HashMap 和 TreeMap 都是继承自 AbstractMap，但是 TreeMap 还实现了 NavigableMap 和 SortedMap 接口。")]),t._v(" "),a("ul",[a("li",[t._v("实现 "),a("code",[t._v("NavigableMap")]),t._v(" 接口让 "),a("code",[t._v("TreeMap")]),t._v(" 有了对集合内元素的搜索的能力。")]),t._v(" "),a("li",[t._v("实现"),a("code",[t._v("SortedMap")]),t._v("接口让 "),a("code",[t._v("TreeMap")]),t._v(" 有了对集合中的元素根据键排序的能力。默认是按 key 的升序排序，不过我们也可以指定排序的比较器。")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeMap")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * @Author: BXuan\n * @Date: 2023/02/24/ 13:47\n * @description TreeMap测试类\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" person1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" person2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" person3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" person4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeMap")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" map "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeMap")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" p2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compare")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"person1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"person2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"person3"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"person4"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("entrySet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("stream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"concurrenthashmap和hashtable有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap和hashtable有什么区别"}},[t._v("#")]),t._v(" ConCurrentHashMap和Hashtable有什么区别？")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("底层数据结构")]),t._v("：JDK1.7的 ConCurrentHashMap 底层采用 分段的数组＋链表 实现，JDK1.8采用的数据结构跟 HashMap 1.8的结构一样，数组 + 链表 / 数组 + 链表 + 红黑树；Hashtable采用的是数组链表的形式，数组是 HashMap 的主体，链表则是为了解决哈希冲突而存在。")]),t._v(" "),a("li",[a("strong",[t._v("实现线程安全的方式")]),t._v(" "),a("ul",[a("li",[t._v("在 "),a("strong",[t._v("JDK1.7")]),t._v(" 的时候，"),a("code",[t._v("ConcurrentHashMap")]),t._v(" 对整个桶数组进行了分割分段("),a("code",[t._v("Segment")]),t._v("，分段锁)，每一把锁只锁容器其中一部分数据，多线程访问容器里不同数据段的数据，就不会存在锁竞争，提高并发访问率。")]),t._v(" "),a("li",[t._v("到了 JDK1.8 的时候，"),a("code",[t._v("ConcurrentHashMap")]),t._v(" 已经摒弃了 "),a("code",[t._v("Segment")]),t._v(" 的概念，而是直接用 "),a("code",[t._v("Node")]),t._v(" 数组+链表+红黑树的数据结构来实现，并发控制使用 "),a("code",[t._v("synchronized")]),t._v(" 和 CAS 来操作。 整个看起来就像是优化过且线程安全的 "),a("code",[t._v("HashMap")]),t._v("，虽然在 JDK1.8 中还能看到 "),a("code",[t._v("Segment")]),t._v(" 的数据结构，但是已经简化了属性，只是为了兼容旧版本；")]),t._v(" "),a("li",[a("strong",[a("code",[t._v("Hashtable")]),t._v("(同一把锁)")]),t._v(" :使用 "),a("code",[t._v("synchronized")]),t._v(" 来保证线程安全，效率非常低下。当一个线程访问同步方法时，其他线程也访问同步方法，可能会进入阻塞或轮询状态，如使用 put 添加元素，另一个线程不能使用 put 添加元素，也不能使用 get，竞争会越来越激烈效率越低。")])])])]),t._v(" "),a("h3",{attrs:{id:"concurrenthashmap的底层实现方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap的底层实现方式"}},[t._v("#")]),t._v(" ConcurrentHashMap的底层实现方式？")]),t._v(" "),a("h4",{attrs:{id:"jdk1-8-之前"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdk1-8-之前"}},[t._v("#")]),t._v(" "),a("strong",[t._v("JDK1.8 之前")])]),t._v(" "),a("p",[t._v("首先将数据分为一段一段（这个“段”就是 "),a("code",[t._v("Segment")]),t._v("）的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据时，其他段的数据也能被其他线程访问。")]),t._v(" "),a("p",[a("strong",[a("code",[t._v("ConcurrentHashMap")]),t._v(" 是由 "),a("code",[t._v("Segment")]),t._v(" 数组结构和 "),a("code",[t._v("HashEntry")]),t._v(" 数组结构组成")]),t._v("。")]),t._v(" "),a("p",[a("code",[t._v("Segment")]),t._v(" 继承了 "),a("code",[t._v("ReentrantLock")]),t._v(",所以 "),a("code",[t._v("Segment")]),t._v(" 是一种可重入锁，扮演锁的角色。"),a("code",[t._v("HashEntry")]),t._v(" 用于存储键值对数据。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Segment")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReentrantLock")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Serializable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("一个 "),a("code",[t._v("ConcurrentHashMap")]),t._v(" 里包含一个 "),a("code",[t._v("Segment")]),t._v(" 数组，"),a("code",[t._v("Segment")]),t._v(" 的个数一旦"),a("strong",[t._v("初始化就不能改变")]),t._v("。 "),a("code",[t._v("Segment")]),t._v(" 数组的大小默认是 16，也就是说默认可以同时支持 16 个线程并发写。")]),t._v(" "),a("p",[a("code",[t._v("Segment")]),t._v(" 的结构和 "),a("code",[t._v("HashMap")]),t._v(" 类似，是一种数组和链表结构，一个 "),a("code",[t._v("Segment")]),t._v(" 包含一个 "),a("code",[t._v("HashEntry")]),t._v(" 数组，每个 "),a("code",[t._v("HashEntry")]),t._v(" 是一个链表结构的元素，每个 "),a("code",[t._v("Segment")]),t._v(" 守护着一个 "),a("code",[t._v("HashEntry")]),t._v(" 数组里的元素，当对 "),a("code",[t._v("HashEntry")]),t._v(" 数组的数据进行修改时，必须首先获得对应的 "),a("code",[t._v("Segment")]),t._v(" 的锁。也就是说，对同一 "),a("code",[t._v("Segment")]),t._v(" 的并发写入会被阻塞，不同 "),a("code",[t._v("Segment")]),t._v(" 的写入是可以并发执行的。")]),t._v(" "),a("h4",{attrs:{id:"jdk1-8-之后"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdk1-8-之后"}},[t._v("#")]),t._v(" JDK1.8 之后")]),t._v(" "),a("p",[a("code",[t._v("ConcurrentHashMap")]),t._v(" 取消了 "),a("code",[t._v("Segment")]),t._v(" 分段锁，采用 "),a("code",[t._v("Node + CAS + synchronized")]),t._v(" 来保证并发安全。数据结构跟 "),a("code",[t._v("HashMap")]),t._v(" 1.8 的结构类似，数组+链表/红黑二叉树。Java 8 在链表长度超过一定阈值（默认为 8）时将链表（寻址时间复杂度为 O(N)）转换为红黑树（寻址时间复杂度为 O(log(N))）。")]),t._v(" "),a("p",[t._v("Java 8 中，锁粒度更细，"),a("code",[t._v("synchronized")]),t._v(" 只锁定当前链表或红黑二叉树的首节点，这样只要 hash 不冲突，就不会产生并发，就不会影响其他 Node 的读写，效率大幅提升。")]),t._v(" "),a("h3",{attrs:{id:"concurrenthashmap-1-7-和-1-8-有什么不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap-1-7-和-1-8-有什么不同"}},[t._v("#")]),t._v(" ConcurrentHashMap 1.7 和 1.8 有什么不同？")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("线程安全实现方式")]),t._v(" ：JDK 1.7 采用 "),a("code",[t._v("Segment")]),t._v(" 分段锁来保证安全， "),a("code",[t._v("Segment")]),t._v(" 是继承自 "),a("code",[t._v("ReentrantLock")]),t._v("。JDK1.8 放弃了 "),a("code",[t._v("Segment")]),t._v(" 分段锁的设计，采用 "),a("code",[t._v("Node + CAS + synchronized")]),t._v(" 保证线程安全，锁粒度更细，"),a("code",[t._v("synchronized")]),t._v(" 只锁定当前链表或红黑二叉树的首节点。")]),t._v(" "),a("li",[a("strong",[t._v("Hash 碰撞解决方法")]),t._v(" : JDK 1.7 采用拉链法，JDK1.8 采用拉链法结合红黑树（链表长度超过一定阈值时，将链表转换为红黑树）。")]),t._v(" "),a("li",[a("strong",[t._v("并发度")]),t._v(" ：JDK 1.7 最大并发度是 Segment 的个数，默认是 16。JDK 1.8 最大并发度是 Node 数组的大小，并发度更大。")])]),t._v(" "),a("h2",{attrs:{id:"hashmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap"}},[t._v("#")]),t._v(" HashMap")]),t._v(" "),a("p",[t._v("HashMap 基于键的 HashCode 值的唯一性，同时基于键的 HashCode 值进行数据的存取，因此可以快速地更新和查询数据，但是"),a("a",{attrs:{href:"https://blog.csdn.net/weixin_59248227/article/details/123943771",target:"_blank",rel:"noopener noreferrer"}},[t._v("每次遍历的顺序无法保证相同"),a("OutboundLink")],1),t._v("。（LinkedHashMap √）")]),t._v(" "),a("p",[t._v("HashMap 的 key 和 value 允许为 null。（"),a("strong",[t._v("HashMap 可以存储一个 Key 为 null，多个 value 为 null 的元素，但是 Hashtable 却不可以存储任何为 null 的值（目的是为了保证线程安全")]),t._v("）")]),t._v(" "),a("p",[t._v("HashMap 是线程不安全的，在同一个时刻要是有多个线程同时对 HashMap 进行写的操作，可能会导致成环的操作。如果必须满足线程安全的操作，可以使用 Collections.synchronizaedMap() / ConCurrentHashMap 使 HashMap 变成线程安全。")]),t._v(" "),a("h3",{attrs:{id:"hashmap的内部数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap的内部数据结构"}},[t._v("#")]),t._v(" HashMap的内部数据结构：")]),t._v(" "),a("p",[t._v("Entry包含：key、val、next、hash")]),t._v(" "),a("p",[t._v("JDK 1.7：数组＋链表( O(n) )")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/BXuan-Yang/blogImage/img/image-20230307004407944.png",alt:"image-20230307004407944"}})]),t._v(" "),a("p",[t._v("JDK 1.8：数组＋链表＋红黑树（ O(logn) ）")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/BXuan-Yang/blogImage/img/image-20230307004421031.png",alt:"image-20230307004421031"}})]),t._v(" "),a("h3",{attrs:{id:"hashmap常见参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap常见参数"}},[t._v("#")]),t._v(" HashMap常见参数")]),t._v(" "),a("p",[t._v("capacity：当前数组的容量，默认为16，可以扩容，*2，所以该容量始终为2n次方")]),t._v(" "),a("p",[t._v("loadFactor：负载因子，始终为0.75")]),t._v(" "),a("p",[t._v("threshold：扩容阈值（就是达到需要再次扩容的点），capacity * loadFactor")]),t._v(" "),a("h2",{attrs:{id:"concurrenthashmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap"}},[t._v("#")]),t._v(" ConcurrentHashMap")]),t._v(" "),a("p",[t._v("ConcurrentHashMap 是线程安全并且高效的 HashMap")]),t._v(" "),a("h3",{attrs:{id:"为什么要使用-concurrenthashmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要使用-concurrenthashmap"}},[t._v("#")]),t._v(" 为什么要使用 ConcurrentHashMap")]),t._v(" "),a("p",[t._v("在并发编程中，"),a("strong",[t._v("使用线程不安全的 HashMap 可能导致程序的死循环，然后使用线程安全的 HashTable效率太低")]),t._v("，所以基于以上的两个原因，在常见的并发编程中就有了 ConcurrentHashMap的登场机会")]),t._v(" "),a("ul",[a("li",[t._v("线程不安全的 HashMap")])]),t._v(" "),a("p",[t._v("在多线程的环境下，使用 HashMap 进行 put 操作可能会引起死循环，导致CPU利用率达100%。这是因为HashMap在并发执行Put操作的时候会使得其中的Entry链表形成环形数据结构。一旦形成环形的数据结构，Entry的next指针永远也不会为空，因此陷入死循环。")]),t._v(" "),a("ul",[a("li",[t._v("效率低下的 HashTable")])]),t._v(" "),a("p",[t._v("HashTable使用Synchronized来对线程进行加锁，保证线程安全。")]),t._v(" "),a("ul",[a("li",[t._v("ConcurrentHashMap")])]),t._v(" "),a("p",[t._v("HashTable在竞争激烈的状态下显示出效率低下的原因是因为访0问HashTable的是同一把锁。")]),t._v(" "),a("p",[t._v("ConcurrentHashMap这里使用的就是锁分段技术，将数据分成一段一段地存储，然后再给每个数据添加一把锁。")]),t._v(" "),a("p",[t._v("ConcurrentHashMap是由segment数组和HashEntry数组组成的。Segment继承了ReentrantLock，是一把可重入锁。每一个ConcurrentHashMap里面有一个segment数组，segment的结构和HashMap类似，是一种数组和链表的结构，一个Segment里面包含一个HashEntry数组，每个HashEntry是一个链表结构的元素。每个segment里面守护者HashEntry数组中的元素，当要对HashEntry数组里面的数据进行修改时，就需要获得相对应的segment的锁。")]),t._v(" "),a("h3",{attrs:{id:"concurrenthashmap初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap初始化"}},[t._v("#")]),t._v(" ConcurrentHashMap初始化")]),t._v(" "),a("p",[t._v("ConcurrentHashMap 在进行初始化的时候，会首先判断哈希表是否已经初始化，如果没有，则首先对哈希表进行初始化。")]),t._v(" "),a("h2",{attrs:{id:"java线程安全的集合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java线程安全的集合"}},[t._v("#")]),t._v(" Java线程安全的集合")]),t._v(" "),a("h3",{attrs:{id:"vector"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vector"}},[t._v("#")]),t._v(" Vector")]),t._v(" "),a("p",[t._v("Vector和ArrayList类似，是长度可变的数组，与ArrayList不同的是，Vector是线程安全的，它给几乎所有的public方法都加上了synchronized关键字。由于加锁导致性能降低，在不需要并发访问同一对象时，这种强制性的同步机制就显得多余，所以现在Vector已被弃用")]),t._v(" "),a("h3",{attrs:{id:"hashtable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashtable"}},[t._v("#")]),t._v(" HashTable")]),t._v(" "),a("p",[t._v("HashTable和HashMap类似，不同点是HashTable是线程安全的，它给几乎所有public方法都加上了synchronized关键字，还有一个不同点是HashTable的K，V都不能是null，但HashMap可以，它现在也因为性能原因被弃用了")]),t._v(" "),a("h3",{attrs:{id:"collections的包装方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#collections的包装方法"}},[t._v("#")]),t._v(" Collections的包装方法")]),t._v(" "),a("p",[t._v("Vector和HashTable被弃用后，它们被ArrayList和HashMap代替，但它们不是线程安全的，所以Collections工具类中提供了相应的包装方法把它们包装成线程安全的集合")]),t._v(" "),a("p",[t._v("Collections针对每种集合都声明了一个线程安全的包装类，在原集合的基础上添加了锁对象，集合中的每个方法都通过这个锁对象实现同步")]),t._v(" "),a("h3",{attrs:{id:"java-util-concurrent包中的集合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-util-concurrent包中的集合"}},[t._v("#")]),t._v(" java.util.concurrent包中的集合")]),t._v(" "),a("ul",[a("li",[t._v("ConcurrentHashMap")])]),t._v(" "),a("p",[t._v("ConcurrentHashMap和HashTable都是线程安全的集合，它们的不同主要是加锁粒度上的不同。HashTable的加锁方法是给每个方法加上synchronized关键字，这样锁住的是整个Table对象。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("CopyOnWriteArrayList")])]),t._v(" "),a("li",[a("p",[t._v("CopyOnWriteArraySet")])]),t._v(" "),a("li",[a("p",[t._v("除此之外还有ConcurrentSkipListMap、ConcurrentSkipListSet、ConcurrentLinkedQueue、ConcurrentLinkedDeque等，至于为什么没有ConcurrentArrayList，原因是无法设计一个通用的而且可以规避ArrayList的并发瓶颈的线程安全的集合类，只能锁住整个list，这用Collections里的包装类就能办到")])])]),t._v(" "),a("h3",{attrs:{id:"相关链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相关链接"}},[t._v("#")]),t._v(" 相关链接")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/lixiaobuaa/article/details/79689338",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java线程安全的集合详解"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"java-如何给-arraylist-排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-如何给-arraylist-排序"}},[t._v("#")]),t._v(" Java 如何给 ArrayList 排序？")]),t._v(" "),a("p",[t._v("ArrayList 的排序可以借助 Collections 工具类的 sort(List list) 以及重载的 sort(List list, Comparator<? super T> c) 方法；")]),t._v(" "),a("p",[t._v("其中要想使用 sort(List list) 方法进行排序集合元素必须实现 comparable 接口中的 compareTo 方法；使用重载的 sort(List list, Comparator<? super T> c) 方法则必须传入一个自定义构造器，可以使用匿名内部类的方法传入构造器。")]),t._v(" "),a("ul",[a("li",[t._v("如果集元素类型是8大基本类型的包装类，或者是 String 类源码中这些类已经实现了 Comparable 接口。")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bxuan"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("studydemo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * @Author: BXuan\n * @Date: 2023/03/22/ 9:16\n * @description 测试类\n */")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayListTest")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Random")]),t._v(" random "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Random")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("random"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collections")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collections")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Comparator")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compare")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" o1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" o2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" o1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" o2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" o2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("对于对象的排序，如果想要使用 sort(List list) 方法给集合排序，集合元素必须实现 comparable 接口中的 compareTo 方法")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bxuan"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("studydemo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayListSortDemo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("lombok"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Data")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * @Author: BXuan\n * @Date: 2023/03/22/ 9:26\n * @description\n */")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Data")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Comparable")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareTo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareTo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bxuan"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("studydemo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayListSortDemo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collections")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * @Author: BXuan\n * @Date: 2023/03/22/ 9:28\n * @description\n */")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" person "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Bxuan"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" person1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("19")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Bxuan1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" person2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Bxuan2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" person3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Bxuan3"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"未排序之前"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collections")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"排序之后"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"说一下-hashmap、hashtable-和-concurrenthashmap-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说一下-hashmap、hashtable-和-concurrenthashmap-的区别"}},[t._v("#")]),t._v(" 说一下 HashMap、Hashtable 和 ConcurrentHashMap 的区别")]),t._v(" "),a("ul",[a("li",[t._v("HashMap 线程不安全，效率高一点，可以存储 null 的 key 和 value，null 的key 只能有一个，null 的value 可以有多个。默认初始容量为 16，每次扩充为原来的 2 倍。创建时如果指定了初始容量，则自动扩充为 2 的幂次方大小。底层数据结构为 数组+链表，插入元素后如果链表长度大于阈值（默认为8），先判断数组长度是否小于 64，如果小于 64，则扩充数组，反之将链表转化为红黑树，以减少搜索的时间；")]),t._v(" "),a("li",[t._v("HashTable 线程安全，效率较低，因为内部方法都是经过 synchronized 修饰，不可以有 null 的 key 和 value。默认初始容量为 11，每次扩容为原来的 2n+1。创建时如果给定了初始容量，会直接使用给定的大小。底层的数据结构为 数组+链表。基本被淘汰，不适用，要保证线程安全可以使用 ConcurrentHashMap；")]),t._v(" "),a("li",[t._v("ConcurrentHashMap 是 Java 中一个线程安全的哈希表实现的，它可以在多线程环境下并发地进行读写操作，而不需要像传统的 HashTable 那样在读写时枷锁。ConcurrentHashMap 的实现原理主要基于分段锁和 CAS 操作，它将整个哈希表分成多段（Segment），每个 Segment 都类似于一个小的 HashMap，它可以拥有自己的数组和一个独立的锁。在 ConcurrentHashMap 中，读操作不需要锁，可以直接对 Segment 进行读取，而写操作只需要锁定对应的 Segment，而不是整个哈希表，这样可以大大提高并发性能。")])]),t._v(" "),a("h2",{attrs:{id:"为什么-hashmap-的容量一定是-2-的次方"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么-hashmap-的容量一定是-2-的次方"}},[t._v("#")]),t._v(" 为什么 HashMap 的容量一定是 2 的次方？")]),t._v(" "),a("p",[t._v("​\t\t在 HashMap 中，元素的存储位置是根据键的哈希值来确定的。当需要存储一个键值对时，HashMap 会根据键的哈希值计算出一个索引位置，然后将该键值对存储在该索引位置上。")]),t._v(" "),a("p",[t._v("​\t\t选择容量为 2 的次方，主要是为了利用位运算来代替取模运算，以提高计算效率。在 HashMap 内部，计算索引位置时，使用的是 (n-1)&hash 的位运算方式，其中 n 为 HashMap 的容量，hash 为键的哈希值。由于容量为 2 的次方，所以 (n-1) 的二进制表示形式全是 1，这样就可以通过位运算取哈希值的低位，避免了昂贵的取模运算。")]),t._v(" "),a("p",[t._v("​\t\t此外，选择容量为 2 的次方还可以减少哈希冲突的概率，当容量为 2 的次方时，哈希值的低位在计算索引位置时会更加均匀地分布在 HashMap 的桶中，减少哈希冲突的可能性，提高 HashMap 的性能。")])])}),[],!1,null,null,null);a.default=e.exports}}]);