(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{317:function(v,_,t){"use strict";t.r(_);var e=t(10),a=Object(e.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"🚀操作系统"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#🚀操作系统"}},[v._v("#")]),v._v(" 🚀操作系统")]),v._v(" "),_("h3",{attrs:{id:"什么是零拷贝-说一说你对零拷贝的理解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是零拷贝-说一说你对零拷贝的理解"}},[v._v("#")]),v._v(" 什么是零拷贝？说一说你对零拷贝的理解？")]),v._v(" "),_("p",[v._v("零拷贝（Zero-Copy）是一种高效的数据传输技术，它可以将"),_("strong",[v._v("数据从内核空间直接传输到应用程序的内存空间")]),v._v("中，避免了不必要的数据拷贝，从而提高了数据传输的效率和性能。")]),v._v(" "),_("p",[v._v("具体来说，零拷贝是指在数据传输过程中，数据可以直接从发送端内存区域被传输到接收端内存区域，而无需在传输过程中进行任何复制操作。从而可以减少上下文切换以及CPU的拷贝时间。它是一种I/O操作优化技术。")]),v._v(" "),_("p",[v._v("传统IO：")]),v._v(" "),_("p",[v._v("传统IO流过程包括 "),_("strong",[v._v("read")]),v._v(" 和 "),_("strong",[v._v("write")]),v._v(" 过程")]),v._v(" "),_("p",[v._v("read:把数据从磁盘读到内核缓冲区，再拷贝到用户缓冲区")]),v._v(" "),_("p",[v._v("write:先把数据写到socket缓冲区，再写入到网卡设备")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/BXuan-Yang/blogImage/img/image-20230316100239241.png",alt:"image-20230316100239241"}})]),v._v(" "),_("ul",[_("li",[v._v("用户应用进程调用read函数，向操作系统发起IO调用， 上下文从用户态转为内核态（切换1）")]),v._v(" "),_("li",[v._v("DMA控制器把数据从磁盘中，读取到内核缓冲区。")]),v._v(" "),_("li",[v._v("CPU把内核缓冲区数据，拷贝到用户应用缓冲区， 上下文从内核态转为用户态（切换2），read函数返回")]),v._v(" "),_("li",[v._v("用户应用进程通过write函数，发起IO调用， 上下文从用户态转为内核态（切换3）")]),v._v(" "),_("li",[v._v("CPU将用户缓冲区中的数据，拷贝到socket缓冲区")]),v._v(" "),_("li",[v._v("DMA控制器把数据从socket缓冲区，拷贝到网卡设备， 上下文从内核态切换回用户态（切换4），write函数返回")])]),v._v(" "),_("p",[v._v("从下面的流程图可以看出，传统IO的读写流程，包括了4次上下文切换（4次用户态和内核态的切换），4次数据拷贝（两次CPU拷贝以及两次的DMA拷贝)")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/BXuan-Yang/blogImage/img/image-20230316100829698.png",alt:"image-20230316100829698"}})]),v._v(" "),_("p",[v._v("零拷贝：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/BXuan-Yang/blogImage/img/image-20230316100253017.png",alt:"image-20230316100253017"}})]),v._v(" "),_("ol",[_("li",[v._v("java 调用 transferTo 方法后，要从 java 程序的用户态切换至内核态，使用 DMA 将数据读入内核缓冲区，不会使用 cpu")]),v._v(" "),_("li",[v._v("只会将一些 offset 和 length 信息拷入 socket 缓冲区，几乎无消耗")]),v._v(" "),_("li",[v._v("使用 DMA 将 内核缓冲区的数据写入网卡，不会使用 cpu")])]),v._v(" "),_("p",[v._v("整个过程仅只发生了一次用户态与内核态的切换，数据拷贝了 2 次。**所谓的【零拷贝】，并不是真正无拷贝，**而是在不会拷贝重复数据到 jvm 内存中，零拷贝的优点有")]),v._v(" "),_("ul",[_("li",[v._v("更少的用户态与内核态的切换")]),v._v(" "),_("li",[v._v("不利用 cpu 计算，减少 cpu 缓存伪共享")]),v._v(" "),_("li",[v._v("零拷贝适合小文件传输")])]),v._v(" "),_("p",[_("strong",[v._v("零拷贝实现的几种方式")])]),v._v(" "),_("p",[v._v("这里的零拷贝其实是根据内核状态划分的，在这里没有经过CPU的拷贝，数据在用户态的状态下，经历了零次拷贝，所以才叫做零拷贝，但不是说不拷贝。")]),v._v(" "),_("ul",[_("li",[v._v("mmap + write")]),v._v(" "),_("li",[v._v("sendfile")]),v._v(" "),_("li",[v._v("带有DMA收集拷贝功能的sendfile")])])])}),[],!1,null,null,null);_.default=a.exports}}]);