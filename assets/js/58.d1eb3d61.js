(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{345:function(v,_,t){"use strict";t.r(_);var a=t(10),e=Object(a.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"http"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[v._v("#")]),v._v(" HTTP")]),v._v(" "),_("h2",{attrs:{id:"什么是-http"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是-http"}},[v._v("#")]),v._v(" 什么是 HTTP ？")]),v._v(" "),_("p",[v._v("HTTP，又称为 "),_("strong",[v._v("超文本传输协议")]),v._v("，是应用层的核心协议。")]),v._v(" "),_("p",[v._v("HTTP 由两个程序组成，一个服务端，一个客户端。")]),v._v(" "),_("p",[v._v("Web 页面是由对象组成的，一个对象只是一个文件，如 HTML 文件、JPEG 文件、Java 程序或者是视频片段等等，它们可以组成一个 URL 来寻址。多数 Web 页面有一个 HTML 基本文件及几个引用对象，例如：一个 HTML 文件＋五个 JPEG 图形，那么这个 Web 页面里面就有六个对象。")]),v._v(" "),_("p",[v._v("HTML 基本文件通过对象的 URL 地址引用页面中的其他对象。"),_("strong",[v._v("每个 URL 地址由两部分组成，一个是主机名、另一个是路径名")]),v._v("。")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("www.baidu.com：就是主机名")])]),v._v(" "),_("li",[_("p",[v._v("/s：就是路径名")])])]),v._v(" "),_("p",[v._v("服务端与客户端的工作原理：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/BXuan-Yang/blogImage/img/image-20230310083635087.png",alt:"image-20230310083635087"}})]),v._v(" "),_("p",[_("strong",[v._v("HTTP 使用 TCP 作为支撑它的传输协议")]),v._v("（而不是 UDP）")]),v._v(" "),_("p",[v._v("HTTP 客户首先发起一个与服务器的 TCP 链接。一旦建立连接，该浏览器和服务器进程就可以通过套接字接口访问 TCP。(客户端的套接字接口是客户进程与 TCP 连接的大门。同样的，服务端的套接字接口是服务端进程与 TCP 连接的大门)")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("客户端向它的套接字接口发送 HTTP 请求报文并从它的套接字接口接收 HTTP 响应报文。")])]),v._v(" "),_("li",[_("p",[v._v("服务端向它的套接字接口发送 HTTP 请求报文并从它的套接字接口接收 HTTP 响应报文。")])])]),v._v(" "),_("p",[v._v("TCP 为 HTTP 传输服务提供可靠传输数据服务。这意味着，一个客户进程发送的每一个 HTTP 请求最终都能完整的到达服务器。一样的道理，服务器进程发送的每一个 HTTP 请求也能完成的被客户端进程接收响应。HTTP 协议不用担心数据丢失的问题，也不用关心 TCP 协议是如何做到可靠数据传输的，这就是 "),_("strong",[v._v("分层体系")]),v._v(" 结构最大的特点。")]),v._v(" "),_("p",[v._v("服务器向客户发送被请求的文件，而不存储任何关于该客户的状态信息。HTTP 服务器并不保存关于客户的任何信息，所以我们说 HTTP "),_("strong",[v._v("是一个无状态协议")]),v._v("。这里的无状态协议，举一个简单的例子：某个特定的用户在几秒前发送了一个请求，服务器已经给与响应了，但是几秒后又发送了一个相同的请求，这时服务器还是会像前一个的做法一样返回相同的响应请求，重新发送对象，就像不记得前几秒已经发送过了一样。")]),v._v(" "),_("h2",{attrs:{id:"http报头格式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http报头格式"}},[v._v("#")]),v._v(" HTTP报头格式")]),v._v(" "),_("h3",{attrs:{id:"请求报文"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#请求报文"}},[v._v("#")]),v._v(" 请求报文")]),v._v(" "),_("p",[v._v("以下是 HTTP 请求报文 的例子：")]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("GET http://jsuacm.cn/ HTTP/1.1\nHost: jsuacm.cn\nConnection: keep-alive\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.25 Safari/537.36 Core/1.70.3877.400 QQBrowser/10.8.4506.400\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\nAccept-Encoding: gzip, deflate\nAccept-Language: zh-CN,zh;q=0.9\n\n//”请求数据”(GET方式的请求一般不包含)\n")])])]),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/BXuan-Yang/blogImage/img/28f0146f4568480abf9afe951dbfddc9.png",alt:"在这里插入图片描述"}})]),v._v(" "),_("p",[v._v("HTTP 请求报文 组成：")]),v._v(" "),_("blockquote",[_("p",[v._v("请求行 + 请求头部 + 空行 + 请求数据")])]),v._v(" "),_("p",[v._v("1、请求行")]),v._v(" "),_("p",[v._v("请求行 由 "),_("strong",[v._v("请求方法字段 + URL字段 + HTTP协议版本字段")]),v._v(" 三部分组成，用空格隔开")]),v._v(" "),_("p",[v._v("例如：GET http://jsuacm.cn/template/jsu/css/modifypage-1.css HTTP/1.1")]),v._v(" "),_("p",[_("strong",[v._v("（1）请求方法")])]),v._v(" "),_("p",[v._v("HTTP 协议常见的请求方法有：POST、GET、HEAD、PUT、POTIONS、TRACE、CONNECT。")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("GET")]),v._v("：")])]),v._v(" "),_("p",[v._v("GET 方法是常见的一种请求方法，当客户端需要从服务器中读取文档的时候、当点击网页上的连接来浏览网站的时候，使用的都是 GET 方法。GET 方法要求服务器将 URL 定位的资源放在响应报文的数据部分，发回给客户端。使用 GET 方法，请求参数和对应的值要附加在 URL 后面，利用一个 ？代表 URL 的结尾与请求参数的开始，传递参数长度受限制。")]),v._v(" "),_("p",[v._v("GET 方式的请求一般不包含 ”请求数据“ 部分，请求数据以地址的形式表现在请求行。显然，这种方式不适合传送私密数据，并且由于不同的浏览器对地址的字符限制也有所不同，一般最多只能识别1024个字符，所以如果需要传送大量数据的时候，也不适合使用GET方式。")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("POST")]),v._v("：")])]),v._v(" "),_("p",[v._v("POST 方法也是常见的一种请求方法，POST 方法可以允许客户端给服务器提供信息较多。POST 方法将请求函数封装在 HTTP 请求数据中，以 名称：值 的形式出现，可以传输大量的数据，这样的话 POST 方法对于传递的数据的大小没有限制，而且也不会显示在 URL 中。")]),v._v(" "),_("ul",[_("li",[v._v("HEAD：")])]),v._v(" "),_("p",[v._v("本质上和 GET 方法是一样的，但是服务端接收到 HEAD 请求后只返回一个响应头，不会发送响应内容。当我们只需要查看某个页面的状态，而不需要查看其具体内容的时候，使用 HEAD 方法是非常高效的。")]),v._v(" "),_("ul",[_("li",[v._v("PUT：")])]),v._v(" "),_("p",[v._v("和 POST 方法类似，但是 html 表单不支持，发送资源与服务器，并存储在服务器指定位置，可用于替换资源，要求客户端事先知道该位置。")]),v._v(" "),_("ul",[_("li",[v._v("DELETE")])]),v._v(" "),_("p",[v._v("请求服务器删除某资源。和put都具有破坏性，可能被防火墙拦截。如果是https协议，则无需担心。")]),v._v(" "),_("ul",[_("li",[v._v("OPTIONS：")])]),v._v(" "),_("p",[v._v("获取 HTTP 服务器支持的 HTTP 请求方法，允许客户端查看服务器的性能，比如 ajax 跨域时的预检等。")]),v._v(" "),_("ul",[_("li",[v._v("TRACE：")])]),v._v(" "),_("p",[v._v("回显服务器收到的请求，主要用于测试或诊断。一般禁用，防止被恶意攻击或盗取信息。")]),v._v(" "),_("ul",[_("li",[v._v("CONNECT：")])]),v._v(" "),_("p",[v._v("HTTP/1.1 协议中预留给能够将连接改为管道方式的 "),_("strong",[v._v("代理服务器")]),v._v("。就是把服务器作为跳板，去访问其他网页然后把数据返回回来，连接成功后，就可以正常的get、post了。")]),v._v(" "),_("p",[_("strong",[v._v("（2）URL 字段")])]),v._v(" "),_("p",[v._v("URL：统一资源定位符，是一种资源位置的抽象唯一识别方法")]),v._v(" "),_("p",[v._v("组成：<协议>://<主机>:<端口>/<路径>")]),v._v(" "),_("p",[_("strong",[v._v("（3）HTTP 版本协议")])]),v._v(" "),_("p",[v._v("协议版本的格式为：HTTP/主版本号.次版本号，常用的有HTTP/1.0和HTTP/1.1，现在最常用的是1.1")]),v._v(" "),_("p",[v._v("2、请求头部")]),v._v(" "),_("p",[v._v("请求头部为请求报文添加了一些附加信息，由 “名：值” 对组成，每行一对，名和值之间使用冒号分隔。请求头部通知服务器有关于客户端请求的信息。比较常见的有：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/BXuan-Yang/blogImage/img/70810659bd9e4ffd831dc14464e997a9.png",alt:"在这里插入图片描述"}})]),v._v(" "),_("p",[v._v("3、空行")]),v._v(" "),_("p",[v._v("请求头部的最后会有一个空行，表示请求头部结束，接下来为请求数据。")]),v._v(" "),_("p",[v._v("4、请求数据")]),v._v(" "),_("p",[v._v("请求数据不在 GET 方法中使用，而在 POST 方法中使用。POST 方法适用于需要客户填写表单的场合。与请求数据相关的最长使用的请求头部是 Content-Type 和 Content-Length")]),v._v(" "),_("ul",[_("li",[v._v("Content-Type：数据类型")])]),v._v(" "),_("blockquote",[_("p",[v._v("Content-Type: text/html; charset=UTF-8")])]),v._v(" "),_("ul",[_("li",[v._v("Content-Length：数据长度")])]),v._v(" "),_("blockquote",[_("p",[v._v("Content-Length: 737265")])]),v._v(" "),_("h3",{attrs:{id:"响应报文"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#响应报文"}},[v._v("#")]),v._v(" 响应报文")]),v._v(" "),_("p",[v._v("HTTP 响应报文 例子：")]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v('HTTP/1.1 200 OK\nServer: nginx/1.18.0 (Ubuntu)\nDate: Wed, 20 Oct 2021 06:46:15 GMT\nContent-Type: text/html; charset=UTF-8\nConnection: keep-alive\nExpires: Thu, 19 Nov 1981 08:52:00 GMT\nCache-Control: no-store, no-cache, must-revalidate\nPragma: no-cache\nContent-Length: 737265\n\n<!DOCTYPE html>\n<html lang="en">\n<head>\n\t<meta charset="utf-8">\n\t<meta http-equiv="X-UA-Compatible" content="IE=edge">\n\t<meta name="viewport" content="width=device-width, initial-scale=1">\n\t<meta name="description" content="">\n\t<meta name="author" content="">\n\t<link rel="icon" href="../../favicon.ico">\n\n\t<title>\n\t\t吉首大学\t</title>\n\n')])])]),_("p",[v._v("HTTP 响应报文组成：")]),v._v(" "),_("blockquote",[_("p",[v._v("状态行 + 响应头部 + 空行 + 响应数据")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/BXuan-Yang/blogImage/img/63594585e1dc4ec486eae6260dd552f7.png",alt:"在这里插入图片描述"}})]),v._v(" "),_("p",[v._v("1、状态行")]),v._v(" "),_("p",[v._v("状态行由 3 部分组成，分别是 协议版本、状态码、状态码描述。")]),v._v(" "),_("p",[v._v("（1）协议版本")]),v._v(" "),_("p",[v._v("与上述请求报文中描述的协议版本一致。协议版本需要与其请求报文一致")]),v._v(" "),_("p",[_("strong",[v._v("（2）状态码")])]),v._v(" "),_("p",[v._v("详细状态码可见左边导航栏阅读：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/BXuan-Yang/blogImage/img/08f780f945204228b2d30d141de06e38.png",alt:"在这里插入图片描述"}})]),v._v(" "),_("p",[v._v("（3）状态码描述")]),v._v(" "),_("p",[v._v("状态码描述是对状态码的简单描述")]),v._v(" "),_("p",[v._v("2、响应头部")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/BXuan-Yang/blogImage/img/image-20230418225926382.png",alt:"image-20230418225926382"}})]),v._v(" "),_("p",[v._v("3、空行")]),v._v(" "),_("p",[v._v("响应头部的最后会有一个空行，表示响应头部结束，接下来为响应数据。与请求报文一致。")]),v._v(" "),_("p",[v._v("4、响应数据")]),v._v(" "),_("p",[v._v("用于存放需要返回给客户端的数据信息。fiddler 抓出来的一段 HTTP 响应数据是一段 HTML。")]),v._v(" "),_("h2",{attrs:{id:"http-常见的状态码有哪些"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-常见的状态码有哪些"}},[v._v("#")]),v._v(" HTTP 常见的状态码有哪些？")]),v._v(" "),_("p",[_("strong",[v._v("1xx")]),v._v("："),_("strong",[v._v("属于提示信息")]),v._v("，是协议处理中的一种中间状态，实际用到的比较少")]),v._v(" "),_("p",[_("strong",[v._v("2xx")]),v._v("："),_("strong",[v._v("表示服务器成功处理了客户端的请求")])]),v._v(" "),_("ul",[_("li",[v._v("200 OK：最常见的成功状态码，表示处理请求正常。如果是 非HEAD 请求，服务器返回的响应头都会有 body 数据（HEAD方法跟GET方法相同，只不过服务器响应时不会返回消息体。）")]),v._v(" "),_("li",[v._v("204 No Content：表示成功的状态码，与 200 OK 基本相同，但是响应头中没有 body 数据")]),v._v(" "),_("li",[v._v("206 Partial Content：表示成功的状态码，应用于 HTTP 分块下载 或者是 断点传输，表示返回的 body 数据并不是资源的全部，而是其中的一部分")])]),v._v(" "),_("p",[_("strong",[v._v("3xx")]),v._v("："),_("strong",[v._v("表示客户端请求的资源位置发生了变动")]),v._v("，需要客户端用新的 URL 重新发送请求获取资源，也就是重定向")]),v._v(" "),_("ul",[_("li",[v._v("301 Moved Permanently：表示永久重定向，说明请求的资源已经不存在了，需要用新的 url 来再次访问")]),v._v(" "),_("li",[v._v("302 Found：表示临时重定向，说明请求的资源还在，但是暂时需要用新的 url 来访问")]),v._v(" "),_("li",[v._v("304 Not Modified：不具有跳转的含义，表示资源未修改，重定向已存在的缓存文件，也称为 "),_("strong",[v._v("缓存重定向")]),v._v("。就是告诉客户端可以继续使用缓存资源，用于缓存控制")])]),v._v(" "),_("p",[_("strong",[v._v("4xx")]),v._v("：表示 "),_("strong",[v._v("客户端发送的报文有误")]),v._v("，服务器无法处理，也就是错误码的意思。")]),v._v(" "),_("ul",[_("li",[v._v("400 Bad Request：表示客户端请求的报文有错误，但是是个笼统的错误")]),v._v(" "),_("li",[v._v("403 Forbidden：表示服务器禁止访问资源，不是客户端的请求出错")]),v._v(" "),_("li",[v._v("404 Not Found：表示请求的资源在服务器上找不到或者不存在，无法提供给客户端")])]),v._v(" "),_("p",[_("strong",[v._v("5xx")]),v._v("：表示客户端请求报文正确，"),_("strong",[v._v("但是服务器处理时内部发生错误")]),v._v("，属于服务器错误码")]),v._v(" "),_("ul",[_("li",[v._v("500 Internal Server Error：与 400 类似，是个笼统的错误码，服务器发生了错误，但是具体发生了什么错误，我们确实不知道的")]),v._v(" "),_("li",[v._v("501 Not Implemented：表示客户端的请求的功能还不支持")]),v._v(" "),_("li",[v._v("502 Bad Gateway：表示服务器作为网关或者代理时返回的错误码，但是服务器自身工作正常，访问后端服务器发生了错误")]),v._v(" "),_("li",[v._v("503 Service Unavailable：表示服务器当前很忙，暂时没有办法响应客户端")])]),v._v(" "),_("h2",{attrs:{id:"http-协议中-get-和-post-有什么区别-分别适用于什么场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-协议中-get-和-post-有什么区别-分别适用于什么场景"}},[v._v("#")]),v._v(" HTTP 协议中 GET 和 POST 有什么区别？分别适用于什么场景？")]),v._v(" "),_("p",[v._v("HTTP 协议中 GET 和 POST 是两种常用的请求方法，它们的区别如下：")]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("参数传递方式不同")]),v._v("：GET 请求参数是在 URL 中以键值对的形式传递的，例如：http://www.example.com/?key1=value1&key2=value2。 而 POST 请求参数是在请求体中以键值对的形式传递的。")]),v._v(" "),_("li",[_("strong",[v._v("参数传递大小不同")]),v._v("：GET 请求参数有大小限制，因为 URL 长度有限制，不同的浏览器和服务器对 URL 长度的限制不同，一般为 2048 个字符。而 POST 请求参数没有大小限制，因为它们是以请求体的形式传递的。")]),v._v(" "),_("li",[_("strong",[v._v("安全性不同")]),v._v("：GET 请求的参数是明文传输的，因为参数在 URL 中，如果涉及敏感信息（如密码），容易被窃取或暴露在浏览器历史记录、代理服务器日志等地方。而 POST 请求的参数在请求体中传输，相对安全一些，但是也需要注意参数加密和防止 CSRF 攻击等问题。")])]),v._v(" "),_("p",[_("strong",[v._v("GET 和 POST 适用的场景不同")]),v._v("：")]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("GET 请求适用于获取数据")]),v._v("，如浏览网页、搜索等。因为 GET 请求参数以明文形式传输，容易被拦截和篡改，所以不适用于提交敏感信息的操作。")]),v._v(" "),_("li",[_("strong",[v._v("POST 请求适用于提交数据")]),v._v("，如登录、注册、发布内容等。因为 POST 请求参数在请求体中传输，相对安全一些，可以提交敏感信息，但是需要注意参数加密和防止 CSRF 攻击等问题。")])]),v._v(" "),_("h2",{attrs:{id:"http-和-https"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-和-https"}},[v._v("#")]),v._v(" HTTP 和 HTTPS")]),v._v(" "),_("h3",{attrs:{id:"http-和-https-有什么区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-和-https-有什么区别"}},[v._v("#")]),v._v(" HTTP 和 HTTPS 有什么区别？")]),v._v(" "),_("ul",[_("li",[v._v("HTTP 是 "),_("strong",[v._v("超文本传输协议")]),v._v("，信息是明文传输，存在安全风险的问题。HTTPS 则解决了 HTTP 不安全的缺陷，在 TCP 和 HTTP 网络层之间加入了 SSL/TLS 安全协议，使得报文能够加密传输")]),v._v(" "),_("li",[v._v("HTTP 连接建立相对简单， TCP 三次握手之后便可进行 HTTP 的报文传输。而 HTTPS 在 TCP 三次握手之后，还需进行 SSL/TLS 的握手过程，才可进入加密报文传输。")]),v._v(" "),_("li",[v._v("两者的默认端口不一样，HTTP 默认端口号是 80，HTTPS 默认端口号是 443。")]),v._v(" "),_("li",[v._v("HTTPS 协议需要向 CA（证书权威机构）申请数字证书，来保证服务器的身份是可信的。")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/BXuan-Yang/blogImage/img/image-20230418210643628.png",alt:"image-20230418210643628"}})]),v._v(" "),_("h3",{attrs:{id:"https-解决了-http-的哪些问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#https-解决了-http-的哪些问题"}},[v._v("#")]),v._v(" HTTPS 解决了 HTTP 的哪些问题？")]),v._v(" "),_("p",[v._v("由于 HTTP 是明文传输，所以安全上存在以下三个风险")]),v._v(" "),_("ol",[_("li",[v._v("窃听风险：可以在通信链路上获取通信内容")]),v._v(" "),_("li",[v._v("篡改风险：可以强制植入广告")]),v._v(" "),_("li",[v._v("冒充风险：冒充是淘宝网站")])]),v._v(" "),_("p",[v._v("HTTPS 在 HTTP 与 TCP 层之间加入了 "),_("code",[v._v("SSL/TLS")]),v._v(" 协议，可以很好的解决了上述的风险：")]),v._v(" "),_("ol",[_("li",[v._v("信息加密")]),v._v(" "),_("li",[v._v("校验机制")]),v._v(" "),_("li",[v._v("身份证书")])]),v._v(" "),_("h3",{attrs:{id:"https-是如何解决上述风险的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#https-是如何解决上述风险的"}},[v._v("#")]),v._v(" HTTPS 是如何解决上述风险的？")]),v._v(" "),_("p",[v._v("1、"),_("strong",[v._v("混合加密")]),v._v(" 的方式实现信息的 "),_("strong",[v._v("机密性")]),v._v("，解决了窃听的风险。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/BXuan-Yang/blogImage/img/image-20230416195737264.png",alt:"image-20230416195737264"}})]),v._v(" "),_("p",[v._v("HTTPS 采用的是 对称加密 和 非对称加密 结合的混合加密方式。")]),v._v(" "),_("p",[v._v("在通信建立前采用 非对称加密 的方式交换 会话密钥，后续不再采用 非对称加密。在通信过程中采用的是 对称加密 的会话密钥的方式来加密明文数据。")]),v._v(" "),_("p",[v._v("采用 混合加密 的方式的原因是：")]),v._v(" "),_("ol",[_("li",[v._v("对称加密只使用到一个密钥，运算速度快，密钥必须加密，无法做到安全的密钥交换")]),v._v(" "),_("li",[v._v("非对称密钥使用两个密钥：公钥和私钥，公钥可以任意分发而私钥保密，解决了密钥交换问题但是速度较慢")])]),v._v(" "),_("p",[_("strong",[v._v("对称加密与非对称加密的区别")]),v._v("：")]),v._v(" "),_("p",[_("strong",[v._v("对称加密算法")]),v._v(" 又称传统加密算法，加密密钥和解密密钥是相同的。对称加密算法要求通信双方在开始通信前，首先要商定这个用于加密和解密的密钥。对称加密算法的安全性就是依赖于这个密钥，如果这个密钥泄露了，就意味着通信不安全。")]),v._v(" "),_("p",[_("strong",[v._v("非对称加密算法")]),v._v(" 的加密密钥是公开的，理论上任何人都可以获得这个公开的加密密钥进行加密。但是，使用公开的密钥加密的信息只有响应的解密密钥才能解开，而这个解密密钥不是公开的。所以在非对称加密算法中，加密密钥也叫做公钥，解密密钥称为私钥。")]),v._v(" "),_("p",[v._v("2、"),_("strong",[v._v("摘要算法")]),v._v(" 的方式来实现 "),_("strong",[v._v("完整性")]),v._v("，它能够为数据生成独一无二的「指纹」，指纹用于校验数据的完整性，解决了篡改的风险。")]),v._v(" "),_("p",[v._v("为了保证传输的内容不被篡改，我们需要对传输的内容计算出一个 指纹，然后同内容传输给对方。")]),v._v(" "),_("p",[v._v("对方收到后，也是先对收到的内容根据计算出一个指纹，然后跟发送方发送过来的指纹做一个比较，如果指纹相同，那么说明内容没有被篡改，否则就是可以判断内容被篡改了。")]),v._v(" "),_("p",[v._v("在计算机里会用 "),_("strong",[v._v("摘要函数")]),v._v("（"),_("strong",[v._v("哈希函数")]),v._v("）来计算出内容的哈希值，也就是传输的内容的指纹。这个哈希值是唯一的，而且无法通过哈希值推导出内容。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/BXuan-Yang/blogImage/img/image-20230416211106033.png",alt:"image-20230416211106033"}})]),v._v(" "),_("p",[v._v("虽然通过哈希算法可以保证内容不会被篡改，但是不能保证 内容+哈希值 不会被中间人替换，因为这里缺少对客户端收到的消息是否来源于服务端的证明。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/BXuan-Yang/blogImage/img/image-20230416212306906.png",alt:"image-20230416212306906"}})]),v._v(" "),_("p",[v._v("私钥是由服务端保存的，服务端会向客户端颁发对应的公钥。如果客户端收到的消息，能被公钥解密，那么说说明该消息是由服务器发送的。")]),v._v(" "),_("p",[v._v("3、将服务器公钥放入到 "),_("strong",[v._v("数字证书")]),v._v(" 中，解决了冒充的风险。")]),v._v(" "),_("h2",{attrs:{id:"https-用到哪些加密技术"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#https-用到哪些加密技术"}},[v._v("#")]),v._v(" HTTPS 用到哪些加密技术？")]),v._v(" "),_("h4",{attrs:{id:"对称加密与非对称加密"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#对称加密与非对称加密"}},[v._v("#")]),v._v(" 对称加密与非对称加密")]),v._v(" "),_("p",[v._v("为了保证消息的保密性，就需要用到加密和解密。加解密算法目前主流的就是 对称加密 和 非对称加密。")]),v._v(" "),_("p",[_("strong",[v._v("对称加密")]),v._v("（共享密钥加密）：")]),v._v(" "),_("p",[_("strong",[v._v("客户端和服务器公用一个密匙用来对消息加解密")]),v._v("，这种方式称为对称加密。客户端和服务器约定好一个加密的密匙。客户端在发消息前用该密匙对消息加密，发送给服务器后，服务器再用该密匙进行解密拿到消息。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/BXuan-Yang/blogImage/img/image-20230417124314761.png",alt:"image-20230417124314761"}})]),v._v(" "),_("p",[v._v("优点：")]),v._v(" "),_("ul",[_("li",[v._v("对称加密解决了 http 中消息保密性的问题")])]),v._v(" "),_("p",[v._v("缺点：")]),v._v(" "),_("ul",[_("li",[v._v("因为客户端与服务端共用一个密钥，所以导致密钥容易泄漏 ，这样子的话很难保证消息来源的可靠性、完整性和准确性")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/BXuan-Yang/blogImage/img/image-20230417124512226.png",alt:"image-20230417124512226"}})]),v._v(" "),_("p",[_("strong",[v._v("非对称加密")]),v._v("（公有密钥加密）：")]),v._v(" "),_("p",[v._v("采用非对称加密时，客户端和服务端均拥有一个公有密匙和一个私有密匙。公有密匙可以对外暴露，而私有密匙只有自己可见。")]),v._v(" "),_("p",[v._v("使用公有密匙加密的消息，只有对应的私有密匙才能解开。反过来，使用私有密匙加密的消息，只有公有密匙才能解开。这样客户端在发送消息前，先用服务器的公匙对消息进行加密，服务器收到后再用自己的私匙进行解密。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/BXuan-Yang/blogImage/img/image-20230417124627061.png",alt:"image-20230417124627061"}})]),v._v(" "),_("p",[v._v("优点：")]),v._v(" "),_("ul",[_("li",[v._v("非对称加密采用 "),_("strong",[v._v("公有密钥和私有密钥")]),v._v(" 的方式，解决了 http 中消息保密性的问题，并且能够使得私有密钥泄漏的风险大大降低")]),v._v(" "),_("li",[v._v("因为公匙加密的消息只有对应的私匙才能解开，所以较大程度上保证了消息的来源性以及消息的准确性和完整性。")])]),v._v(" "),_("p",[v._v("缺点：")]),v._v(" "),_("ul",[_("li",[v._v("非对称加密时需要使用到接收方的公匙对消息进行加密，但是公匙不是保密的，任何人都可以拿到，中间人也可以。那么中间人可以做两件事，第一件是中间人可以在客户端与服务器交换公匙的时候，将客户端的公匙替换成自己的。这样服务器拿到的公匙将不是客户端的，而是中间人的。服务器也无法判断公匙来源的正确性。第二件是中间人可以不替换公匙，但是他可以截获客户端发来的消息，然后篡改，然后用服务器的公匙加密再发往服务器，服务器将收到错误的消息。")]),v._v(" "),_("li",[v._v("非对称加密的性能相对对称加密来说会慢上几倍甚至几百倍，比较消耗系统资源。正是因为如此，https将两种加密结合了起来。")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/BXuan-Yang/blogImage/img/image-20230417125059913.png",alt:"image-20230417125059913"}})]),v._v(" "),_("h4",{attrs:{id:"数字证书与数字签名"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数字证书与数字签名"}},[v._v("#")]),v._v(" 数字证书与数字签名")]),v._v(" "),_("p",[v._v("1、"),_("strong",[v._v("数字证书的申请")])]),v._v(" "),_("p",[v._v("为了解决非对称加密中公匙来源的不安全性，我们可以使用 "),_("strong",[v._v("数字证书和数字签名")]),v._v(" 来解决。")]),v._v(" "),_("p",[v._v("服务器可以向 CA 申请数字证书，申请的大致流程是：")]),v._v(" "),_("ul",[_("li",[v._v("服务器自己本地先生成一对密匙，然后拿着自己的公匙以及其他信息（比如说企业名称啊什么的）去CA申请数字证书。")]),v._v(" "),_("li",[v._v("CA在拿到这些信息后，会选择一种单向Hash算法（比如说常见的MD5）对这些信息进行加密，加密之后的东西我们称之为 "),_("strong",[v._v("摘要")]),v._v("。")]),v._v(" "),_("li",[v._v("单向Hash算法有一种特点就是单向不可逆的，只要原始内容有一点变化，加密后的数据都将会是千差万别（当然也有很小的可能性会重复，有兴趣的小伙伴鸽巢原理了解一下），这样就防止了信息被篡改。")]),v._v(" "),_("li",[v._v("生成摘要后还不算完，CA还会用自己的私匙对摘要进行加密，摘要加密后的数据我们称之为 "),_("strong",[v._v("数字签名")]),v._v("。")]),v._v(" "),_("li",[v._v("最后，CA将会把我们的申请信息（包含服务器的公匙）和数字签名整合在一起，由此而生成数字证书。然后CA将数字证书传递给我们。")])]),v._v(" "),_("p",[v._v("2、数字证书怎么起作用？")]),v._v(" "),_("p",[v._v("服务器在获取到数字证书后，服务器会将数字证书发送给客户端，客户端就需要用CA的公匙解密数字证书并验证数字证书的合法性。那我们如何能拿到CA的公匙呢？我们的电脑和浏览器中已经内置了一部分权威机构的根证书，这些根证书中包含了CA的公匙。")]),v._v(" "),_("p",[v._v("之所以是根证书，是因为现实生活中，认证中心是分层级的，也就是说有顶级认证中心，也有下面的各个子级的认证中心，是一个树状结构，计算机中内置的是最顶级机构的根证书，不过不用担心，根证书的公匙在子级也是适用的。")]),v._v(" "),_("p",[v._v("客户端用CA的公匙解密数字证书，如果解密成功则说明证书来源于合法的认证机构。解密成功后，客户端就拿到了摘要。")]),v._v(" "),_("p",[v._v("此时，客户端会按照和CA一样的Hash算法将申请信息生成一份摘要，并和解密出来的那份做对比，如果相同则说明内容完整，没有被篡改。最后，客户端安全的从证书中拿到服务器的公匙就可以和服务器进行安全的非对称加密通信了。服务器想获得客户端的公匙也可以通过相同方式。")]),v._v(" "),_("h4",{attrs:{id:"https-原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#https-原理"}},[v._v("#")]),v._v(" HTTPS 原理")]),v._v(" "),_("p",[v._v("HTTPS 没有采用单一的技术去实现，而是根据他们的特点，充分的将这些技术整合进去，以达到性能与安全最大化。这套整合的技术我们称之为SSL（Secure Scoket Layer 安全套接层）。所以https并非是一项新的协议，它只是在http上披了一层加密的外壳。")]),v._v(" "),_("p",[v._v("HTTPS 先是利用数字证书保证服务器端的公匙可以安全无误的到达客户端。然后再用非对称加密安全的传递共享密匙，最后用共享密匙安全的交换数据。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/BXuan-Yang/blogImage/img/image-20230417130313826.png",alt:"image-20230417130313826"}})]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/BXuan-Yang/blogImage/img/image-20230417131524058.png",alt:"image-20230417131524058"}})]),v._v(" "),_("h2",{attrs:{id:"http-用到了哪些其他的协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-用到了哪些其他的协议"}},[v._v("#")]),v._v(" http 用到了哪些其他的协议？")]),v._v(" "),_("h4",{attrs:{id:"tcp-ip-协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp-ip-协议"}},[v._v("#")]),v._v(" TCP/IP 协议")]),v._v(" "),_("p",[v._v("TCP/IP 协议实际上是一系列网络通信协议的统称，其中最核心的就是 TCP 和 IP，其它的还有 UDP、ICMP、ARP等等，共同构成了一个复杂但有层次的协议栈。")]),v._v(" "),_("p",[v._v("TCP 属于 “传输层”，IP 属于 “网际层”")]),v._v(" "),_("p",[v._v("IP 协议是“Internet Protocol”的缩写，主要目的是解决寻址和路由问题，以及如何在两点间传送数据包。")]),v._v(" "),_("p",[v._v("TCP 协议是“Transmission Control Protocol”的缩写，意思是“传输控制协议”，它位于 IP 协议之上，基于 IP 协议提供可靠的、字节流形式的通信，是 HTTP 协议得以实现的基础。")]),v._v(" "),_("p",[v._v('HTTP 是一个"传输协议"，但它不关心寻址、路由、数据完整性等传输细节，而要求这些工作都由下层来处理。因为互联网上最流行的是 TCP/IP 协议，而它刚好满足 HTTP 的要求，所以互联网上的 HTTP 协议就运行在了 TCP/IP 上，HTTP 也就可以更准确地称为“HTTP over TCP/IP”。')]),v._v(" "),_("h4",{attrs:{id:"dns"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#dns"}},[v._v("#")]),v._v(" DNS")]),v._v(" "),_("p",[v._v("“域名系统”，用有意义的名字来作为 IP 地址的等价代替。在 DNS 中，“域名” 又称为 “主机名”。域名用 “.” 分隔成多个单词，组别从左到右逐级升高，最右边的被称为 ”顶级域名“。")]),v._v(" "),_("p",[v._v("但想要使用 TCP/IP 协议来通信仍然要使用 IP 地址，所以需要把域名做一个转换，“映射”到它的真实 IP，这就是所谓的**“域名解析”**。")]),v._v(" "),_("h4",{attrs:{id:"uri-url"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#uri-url"}},[v._v("#")]),v._v(" URI/URL")]),v._v(" "),_("p",[v._v("URI（Uniform Resource Identifier），中文名称是 统一资源标识符，使用它就能够唯一地标记互联网上资源。")]),v._v(" "),_("p",[v._v("URI 另一个更常用的表现形式是 URL（Uniform Resource Locator）， 统一资源定位符，也就是我们俗称的“网址”，它实际上是 URI 的一个子集，不过因为这两者几乎是相同的，差异不大，所以通常不会做严格的区分。")]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("http://nginx.org/en/download.html\n")])])]),_("p",[v._v("URI 主要有三个基本的部分构成：")]),v._v(" "),_("ul",[_("li",[v._v("协议名：即访问该资源应当使用的协议，在这里是“http”；")]),v._v(" "),_("li",[v._v("主机名：即互联网上主机的标记，可以是域名或 IP 地址，在这里是“nginx.org”；")]),v._v(" "),_("li",[v._v("路径：即资源在主机上的位置，使用“/”分隔多级目录，在这里是“/en/download.html”。")])]),v._v(" "),_("h4",{attrs:{id:"https"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#https"}},[v._v("#")]),v._v(" HTTPS")]),v._v(" "),_("p",[v._v('"HTTP over SSL/TLS"，也就是运行在 SSL/TLS 协议上的 HTTP。\nSSL/TLS，它是一个负责加密通信的安全协议，建立在 TCP/IP 之上，所以也是个可靠的传输协议，可以被用作 HTTP 的下层。\nHTTPS 相当于“HTTP+SSL/TLS+TCP/IP”。')]),v._v(" "),_("h4",{attrs:{id:"ssl"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ssl"}},[v._v("#")]),v._v(" SSL")]),v._v(" "),_("p",[v._v("SSL 的全称是“Secure Socket Layer”，由网景公司发明，当发展到 3.0 时被标准化，改名为 TLS，即“Transport Layer Security”，但由于历史的原因还是有很多人称之为 SSL/TLS，或者直接简称为 SSL。")]),v._v(" "),_("p",[v._v("SSL 使用了许多密码学最先进的研究成果，综合了对称加密、非对称加密、摘要算法、数字签名、数字证书等技术，能够在不安全的环境中为通信的双方创建出一个秘密的、安全的传输通道，为 HTTP 套上一副坚固的盔甲。")]),v._v(" "),_("h4",{attrs:{id:"代理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#代理"}},[v._v("#")]),v._v(" 代理")]),v._v(" "),_("p",[v._v("代理（Proxy）是 HTTP 协议中请求方和应答方中间的一个环节，作为“中转站”，既可以转发客户端的请求，也可以转发服务器的应答。")]),v._v(" "),_("p",[v._v("代理有很多的种类，常见的有：")]),v._v(" "),_("ol",[_("li",[v._v("匿名代理：完全“隐匿”了被代理的机器，外界看到的只是代理服务器；")]),v._v(" "),_("li",[v._v("透明代理：顾名思义，它在传输过程中是“透明开放”的，外界既知道代理，也知道客户端；")]),v._v(" "),_("li",[v._v("正向代理：靠近客户端，代表客户端向服务器发送请求；")]),v._v(" "),_("li",[v._v("反向代理：靠近服务器端，代表服务器响应客户端的请求；")])]),v._v(" "),_("p",[v._v("由于代理在传输过程中插入了一个“中间层”，所以可以在这个环节做很多有意思的事情，比如：")]),v._v(" "),_("ul",[_("li",[v._v("负载均衡：把访问请求均匀分散到多台机器，实现访问集群化；")]),v._v(" "),_("li",[v._v("内容缓存：暂存上下行的数据，减轻后端的压力；")]),v._v(" "),_("li",[v._v("安全防护：隐匿 IP, 使用 WAF 等工具抵御网络攻击，保护被代理的机器；")]),v._v(" "),_("li",[v._v("数据处理：提供压缩、加密等额外的功能。")])]),v._v(" "),_("p",[v._v("关于 HTTP 的代理还有一个特殊的“代理协议”（proxy protocol），它由知名的代理软件 HAProxy 制订，但并不是 RFC 标准")]),v._v(" "),_("h4",{attrs:{id:"总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),_("ul",[_("li",[v._v("TCP/IP 是网络世界最常用的协议，HTTP 通常运行在 TCP/IP 提供的可靠传输基础上；")]),v._v(" "),_("li",[v._v("DNS 域名是 IP 地址的等价替代，需要用域名解析实现到 IP 地址的映射；")]),v._v(" "),_("li",[v._v("URI 是用来标记互联网上资源的一个名字，由“协议名 + 主机名 + 路径”构成，俗称 URL；")]),v._v(" "),_("li",[v._v("HTTPS 相于“HTTP+SSL/TLS+TCP/IP”，为 HTTP 套了一个安全的外壳；代理是 HTTP 传输过程中的“中转站”，可以实现缓存加速、负载均衡等功能。")])]),v._v(" "),_("h2",{attrs:{id:"讲一下dns过程。给一个网址-www-bytedance-com-dns服务器如何逐级解析的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#讲一下dns过程。给一个网址-www-bytedance-com-dns服务器如何逐级解析的"}},[v._v("#")]),v._v(" 讲一下dns过程。给一个网址 www.bytedance.com，dns服务器如何逐级解析的？")]),v._v(" "),_("p",[v._v("DNS 解析过程：")]),v._v(" "),_("p",[v._v("第一步：客户机提出域名解析请求,并将该请求发送给本地的"),_("a",{attrs:{href:"https://baike.baidu.com/item/%E5%9F%9F%E5%90%8D%E6%9C%8D%E5%8A%A1%E5%99%A8/9705133?fromModule=lemma_inlink",target:"_blank",rel:"noopener noreferrer"}},[v._v("域名服务器"),_("OutboundLink")],1),v._v("。")]),v._v(" "),_("p",[v._v("第二步：当本地的域名服务器收到请求后,就先查询本地的缓存,如果有该纪录项,则本地的域名服务器就直接把查询的结果返回.")]),v._v(" "),_("p",[v._v("第三步：如果本地的缓存中没有该纪录,则本地域名服务器就直接把请求发给"),_("a",{attrs:{href:"https://baike.baidu.com/item/%E6%A0%B9%E5%9F%9F%E5%90%8D%E6%9C%8D%E5%8A%A1%E5%99%A8/5907519?fromModule=lemma_inlink",target:"_blank",rel:"noopener noreferrer"}},[v._v("根域名服务器"),_("OutboundLink")],1),v._v(",然后根域名服务器再返回给本地域名服务器一个所查询域(根的子域)的主域名服务器的地址.")]),v._v(" "),_("p",[v._v("第四步：本地服务器再向上一步返回的域名服务器发送请求,然后接受请求的服务器查询自己的缓存,如果没有该纪录,则返回相关的下级的域名服务器的地址.")]),v._v(" "),_("p",[v._v("第五步：重复第四步,直到找到正确的纪录.")]),v._v(" "),_("p",[v._v("第六步：本地域名服务器把返回的结果保存到缓存,以备下一次使用,同时还将结果返回给客户机")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/BXuan-Yang/blogImage/img/e7a34161bde84e858757ff1c26bc9674.png",alt:"img"}})]),v._v(" "),_("h2",{attrs:{id:"持续连接和非持续连接"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#持续连接和非持续连接"}},[v._v("#")]),v._v(" 持续连接和非持续连接")]),v._v(" "),_("p",[_("strong",[v._v("非持续连接")]),v._v("：每个请求/响应式经过一个单独的TCP连接发送的")]),v._v(" "),_("p",[_("strong",[v._v("持续连接")]),v._v("：所有的请求/响应是经由一个相同的TCP连接发送的（HTTP默认的情况下使用的是持续连接）")]),v._v(" "),_("h3",{attrs:{id:"采用非持续连接的-http"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#采用非持续连接的-http"}},[v._v("#")]),v._v(" 采用非持续连接的 HTTP")]),v._v(" "),_("p",[v._v("假设我们现在在"),_("strong",[v._v("非持续连接的 HTTP 的情况")]),v._v("下，服务器向客户传送一个Web页面的步骤，假设该页面含有一个基本的HTML文件＋十张JPEG图片，此时这个Web页面里面就有11个对象，并且这11个对象位于同一台服务器上，进一步假设当前HTML文件的URL为：http://www.homeSchool.com/user/home.index。此时会发生下面的情况：")]),v._v(" "),_("ol",[_("li",[v._v("HTTP客户进程在端口 80 发送一个到服务器 www.homeSchool.com 的 TCP 连接，该端口号是 HTTP 默认的端口号，在客户和服务器上分别由一个套接字与该连接相连")]),v._v(" "),_("li",[v._v("HTTP 客户端经它的套接字向该服务器发送一个 HTTP 请求报文，请求报文中包含 URL 的路径 (/user/home.index)")]),v._v(" "),_("li",[v._v("HTTP服务器经它的套接字接收到该HTTP请求报文，从存储器中（RAM/磁盘）中检索出对象http://www.homeSchool.com/user/home.index，然后在一个HTTP影响报文里面封装该对象，并通过套接字向客户发送响应报文")]),v._v(" "),_("li",[v._v("HTTP服务器进程通知TCP断开连接（但是TCP会等到客户已经确认完之后才去断开）")]),v._v(" "),_("li",[v._v("HTTP客户接收响应报文，TCP连接关闭，该报文封装的是一个HTML文件，客户从响应报文中提取出该文件，检查HTML文件，得到10个JEPG图形的引用。")]),v._v(" "),_("li",[v._v("对每一个JEPG引用都重复使用前四个步骤")])]),v._v(" "),_("p",[v._v("**在非持续连接的HTTP情况下，每个HTTP连接在服务器发送玩一个对象后就会进行关闭，即该对象并不会为了其他的对象而存活下来。**每个TCP连接至传输一个请求报文和一个响应报文，例如上面的例子，就要产生11个TCP连接。")]),v._v(" "),_("p",[v._v("在上面的描述步骤中，没有明确的说出获取后面的10个JPEG图形对象是使用10个串行连接还是并行连接，事实上，这个可以通过用户自己来控制，在默认的方式下，大部分浏览器可以打开5~10个的TCP连接。使用并行连接的话可以缩短响应的时间。")]),v._v(" "),_("p",[v._v("RTT（往返时间）：从客户请求HTML基本文件到该客户收到整个文件所花费的时间。RTT包括分组传播时延、分组在中间路由器和交换机上的排队时延以及分组处理时延。")]),v._v(" "),_("h3",{attrs:{id:"用户点击超链接时会发生什么现象"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#用户点击超链接时会发生什么现象"}},[v._v("#")]),v._v(" 用户点击超链接时会发生什么现象？")]),v._v(" "),_("p",[v._v("设计一次“三次握手”的过程，即在客户向服务器发送一个小TCP报文段，服务器用一个小TCP报文段做出确认和响应，最后，客户向服务器返回确认。")]),v._v(" "),_("p",[v._v("总时间：2*RTT + 最终传输HTML文件所需的时间（图中画的不是很明显）")]),v._v(" "),_("h3",{attrs:{id:"采用持续连接的http"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#采用持续连接的http"}},[v._v("#")]),v._v(" 采用持续连接的HTTP")]),v._v(" "),_("p",[v._v("首先我们先来谈一下非持续连接的缺点")]),v._v(" "),_("ul",[_("li",[v._v("必须为每一个请求的对象建立和维护一个全新的连接")])]),v._v(" "),_("p",[v._v("对于每一个这样的TCP连接，在客户和服务器中都要分配TCP的缓冲区和保持TCP变量，这会给Web服务器带来严重的负担，因为一台Web服务器中可能要同时服务很多的客户的请求")]),v._v(" "),_("ul",[_("li",[v._v("时间过长")])]),v._v(" "),_("p",[v._v("像我们之前分析的来说，每一个对象都需要经受两个RTT，即一个RTT用于创建TCP，另一个RTT用于请求和接收对象")]),v._v(" "),_("p",[v._v("一般来说，如果一条连接经过一定时间间隔（是可配置的时间间隔）仍未被时延，那么HTTP服务器就关闭该连接，HTTP默认是使用带流水线的持续连接。")]),v._v(" "),_("p",[v._v("自HTTP1.1采用持续连接的情况下，服务器能在发送响应后保持TCP连接打开。相同的客户与服务器之间，后续的请求和响应报文能够通过相同的连接进行传送。特别是一个完整的Web页面（如上个例子中的HTML文件和十个JEPG文件），可以持续使用单个TCP连接进行传送。更有甚者，唯一同一台服务器上的多个Web文件从该服务器发给客户时，都可以在单个TCP连接上进行。")]),v._v(" "),_("h2",{attrs:{id:"http-1-1、http-2、http-3-演变"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-1-1、http-2、http-3-演变"}},[v._v("#")]),v._v(" HTTP/1.1、HTTP/2、HTTP/3 演变")]),v._v(" "),_("h3",{attrs:{id:"http-1-1-相比-http-1-0-提高了什么性能"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-1-1-相比-http-1-0-提高了什么性能"}},[v._v("#")]),v._v(" HTTP/1.1 相比 HTTP/1.0 提高了什么性能？")]),v._v(" "),_("p",[_("strong",[v._v("HTTP/1.1 相比 HTTP/1.0 性能上的改进：")])]),v._v(" "),_("ul",[_("li",[v._v("使用长连接（Connection:keep-alive）的方式改善了 HTTP/1.0 短连接造成的性能开销。")]),v._v(" "),_("li",[v._v("支持 "),_("strong",[v._v("管道（pipeline）网络传输")]),v._v("，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以减少整体的响应时间。")])]),v._v(" "),_("p",[v._v("但 HTTP/1.1 还是有性能瓶颈：")]),v._v(" "),_("ul",[_("li",[v._v("请求 / 响应头部（Header）未经压缩就发送，首部信息越多延迟越大。只能压缩 "),_("code",[v._v("Body")]),v._v(" 的部分；")]),v._v(" "),_("li",[v._v("发送冗长的首部。每次互相发送相同的首部造成的浪费较多；")]),v._v(" "),_("li",[v._v("服务器是按请求的顺序响应的，如果服务器响应慢，会招致客户端一直请求不到数据，也就是队头阻塞；")]),v._v(" "),_("li",[v._v("没有请求优先级控制；")]),v._v(" "),_("li",[v._v("请求只能从客户端开始，服务器只能被动响应。")])]),v._v(" "),_("h3",{attrs:{id:"什么是长连接和短连接"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是长连接和短连接"}},[v._v("#")]),v._v(" 什么是长连接和短连接？")]),v._v(" "),_("p",[v._v("**在 HTTP/1.0 中默认使用短连接。**短连接也就是说，客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个HTML或其他类型的Web页中包含有其他的 Web 资源（如JavaScript 文件、图像文件、CSS 文件等），每遇到这样一个 Web 资源，浏览器就会重新建立一个 HTTP 会话。")]),v._v(" "),_("p",[_("strong",[v._v("而从 HTTP/1.1 起，默认使用长连接，用以保持连接特性")]),v._v("。使用长连接的 HTTP 协议，会在响应头加入这行代码：")]),v._v(" "),_("div",{staticClass:"language-css extra-class"},[_("pre",{pre:!0,attrs:{class:"language-css"}},[_("code",[_("span",{pre:!0,attrs:{class:"token property"}},[v._v("Connection")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v("keep-alive\n")])])]),_("p",[v._v("在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输 HTTP 数据的 TCP 连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。")]),v._v(" "),_("p",[v._v("Keep-Alive 不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如 Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。")]),v._v(" "),_("p",[_("strong",[v._v("HTTP 协议的长连接和短连接，实质上是 TCP 协议的长连接和短连接。")])]),v._v(" "),_("h3",{attrs:{id:"tcp-连接与断开连接"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp-连接与断开连接"}},[v._v("#")]),v._v(" TCP 连接与断开连接")]),v._v(" "),_("p",[v._v("当网络通信时采用 TCP 协议时，在真正的读写操作之前，客户端与服务器端之间必须建立一个连接，当读写操作完成后，双方不再需要这个连接时可以释放这个连接。")]),v._v(" "),_("p",[v._v("连接的建立依靠“"),_("strong",[v._v("三次握手")]),v._v("”，而释放则需要“"),_("strong",[v._v("四次握手")]),v._v("”，所以每个连接的建立都是需要资源消耗和时间消耗的。")]),v._v(" "),_("p",[v._v("经典的三次握手及四次挥手示意图：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/BXuan-Yang/blogImage/img/image-20230306004438441.png",alt:"image-20230306004438441"}})]),v._v(" "),_("h3",{attrs:{id:"长连接与短连接操作过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#长连接与短连接操作过程"}},[v._v("#")]),v._v(" 长连接与短连接操作过程")]),v._v(" "),_("blockquote",[_("p",[v._v("短连接的操作步骤是：\n建立连接——数据传输——关闭连接...建立连接——数据传输——关闭连接")]),v._v(" "),_("p",[v._v("长连接的操作步骤是：\n建立连接——数据传输...（保持连接）...数据传输——关闭连接")])]),v._v(" "),_("h3",{attrs:{id:"什么时候用长连接-短连接"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么时候用长连接-短连接"}},[v._v("#")]),v._v(" 什么时候用长连接，短连接？")]),v._v(" "),_("p",[_("strong",[v._v("长连接")]),v._v("多用于操作频繁，点对点的通讯，而且连接数不能太多情况。每个 TCP 连接都需要三步握手，这需要时间，如果每个操作都是先连接，再操作的话那么处理速度会降低很多，所以每个操作完后都不断开，次处理时直接发送数据包就 OK 了，不用建立 TCP 连接。")]),v._v(" "),_("p",[v._v("例如：数据库的连接用长连接， 如果用短连接频繁的通信会造成 socket 错误，而且频繁的 socket 创建也是对资源的浪费。")]),v._v(" "),_("p",[v._v("而像 WEB 网站的 http 服务一般都用"),_("strong",[v._v("短链接")]),v._v("，因为长连接对于服务端来说会耗费一定的资源，而像 WEB 网站这么频繁的成千上万甚至上亿客户端的连接用短连接会更省一些资源，如果用长连接，而且同时有成千上万的用户，如果每个用户都占用一个连接的话，那可想而知吧。所以并发量大，但每个用户无需频繁操作情况下需用短连接好。")]),v._v(" "),_("h3",{attrs:{id:"http-协议与-tcp-ip-协议的关系"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-协议与-tcp-ip-协议的关系"}},[v._v("#")]),v._v(" "),_("strong",[v._v("HTTP 协议与 TCP/IP 协议的关系")])]),v._v(" "),_("p",[v._v("HTTP 的长连接和短连接本质上是 TCP 长连接和短连接。")]),v._v(" "),_("p",[_("strong",[v._v("HTTP 属于应用层协议，在传输层使用 TCP 协议，在网络层使用IP协议。")])]),v._v(" "),_("p",[v._v("IP 协议主要解决网络路由和寻址问题，TCP 协议主要解决如何在 IP 层之上可靠地传递数据包，使得网络上接收端收到发送端所发出的所有包，并且顺序与发送顺序一致。TCP 协议是可靠的、面向连接的。")]),v._v(" "),_("h3",{attrs:{id:"http-2-做了什么优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-2-做了什么优化"}},[v._v("#")]),v._v(" HTTP/2 做了什么优化？")]),v._v(" "),_("p",[v._v("HTTP/2 协议是基于 HTTPS 的，所以 HTTP/2 的安全性也是有保障的。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/BXuan-Yang/blogImage/img/image-20230306004742770.png",alt:"image-20230306004742770"}})]),v._v(" "),_("p",[v._v("HTTP/2 相比 HTTP/1.1 性能上的改进：")]),v._v(" "),_("ul",[_("li",[v._v("头部压缩")]),v._v(" "),_("li",[v._v("二进制格式")]),v._v(" "),_("li",[v._v("并发传输")]),v._v(" "),_("li",[v._v("服务器主动推送资源")])]),v._v(" "),_("ol",[_("li",[v._v("头部压缩")])]),v._v(" "),_("p",[v._v("HTTP/2 会"),_("strong",[v._v("压缩头")]),v._v("（Header）如果你同时发出多个请求，他们的头是一样的或是相似的，那么，协议会帮你"),_("strong",[v._v("消除重复的部分")]),v._v("。")]),v._v(" "),_("p",[v._v("这就是所谓的 "),_("code",[v._v("HPACK")]),v._v(" 算法：在客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就"),_("strong",[v._v("提高速度")]),v._v("了。")]),v._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[v._v("二进制格式")])]),v._v(" "),_("p",[v._v("HTTP/2 不再像 HTTP/1.1 里的纯文本形式的报文，而是全面采用了"),_("strong",[v._v("二进制格式")]),v._v("，头信息和数据体都是二进制，并且统称为帧（frame）："),_("strong",[v._v("头信息帧（Headers Frame）和数据帧（Data Frame）")]),v._v("。")]),v._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[v._v("并发传输")])]),v._v(" "),_("p",[v._v("我们都知道 "),_("strong",[v._v("HTTP/1.1 的实现是基于请求-响应模型")]),v._v("的。同一个连接中，HTTP 完成一个事务（请求与响应），才能处理下一个事务，也就是说在发出请求等待响应的过程中，是没办法做其他事情的，如果响应迟迟不来，那么后续的请求是无法发送的，也造成了"),_("strong",[v._v("队头阻塞")]),v._v("的问题。")]),v._v(" "),_("ol",{attrs:{start:"4"}},[_("li",[v._v("服务器推送")])]),v._v(" "),_("p",[v._v("HTTP/2 还在一定程度上改善了传统的「请求 - 应答」工作模式，服务端不再是被动地响应，可以"),_("strong",[v._v("主动")]),v._v("向客户端发送消息。")]),v._v(" "),_("p",[v._v("客户端和服务器"),_("strong",[v._v("双方都可以建立 Stream")]),v._v("， Stream ID 也是有区别的，客户端建立的 Stream 必须是奇数号，而服务器建立的 Stream 必须是偶数号。")]),v._v(" "),_("h3",{attrs:{id:"http-2-有什么缺陷"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-2-有什么缺陷"}},[v._v("#")]),v._v(" HTTP/2 有什么缺陷？")]),v._v(" "),_("p",[v._v("HTTP/2 通过 Stream 的并发能力，解决了 HTTP/1 队头阻塞的问题，看似很完美了，但是 HTTP/2 还是存在“队头阻塞”的问题，只不过问题不是在 HTTP 这一层面，而是在 TCP 这一层。")]),v._v(" "),_("p",[_("strong",[v._v("HTTP/2 是基于 TCP 协议来传输数据的，TCP 是字节流协议，TCP 层必须保证收到的字节数据是完整且连续的，这样内核才会将缓冲区里的数据返回给 HTTP 应用，那么当「前 1 个字节数据」没有到达时，后收到的字节数据只能存放在内核缓冲区里，只有等到这 1 个字节数据到达时，HTTP/2 应用层才能从内核中拿到数据，这就是 HTTP/2 队头阻塞问题。")])]),v._v(" "),_("h3",{attrs:{id:"http-3-做了什么优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-3-做了什么优化"}},[v._v("#")]),v._v(" HTTP/3 做了什么优化？")]),v._v(" "),_("p",[v._v("我们知道了 HTTP/1.1 和 HTTP/2 都有队头阻塞的问题：")]),v._v(" "),_("ul",[_("li",[v._v("HTTP/1.1 中的"),_("strong",[v._v("管道（ pipeline）"),_("strong",[v._v("虽然解决了请求的队头阻塞，但是")]),v._v("没有解决响应的队头阻塞")]),v._v("，因为服务端需要按顺序响应收到的请求，如果服务端处理某个请求消耗的时间比较长，那么只能等响应完这个请求后， 才能处理下一个请求，这属于 HTTP 层队头阻塞。")]),v._v(" "),_("li",[v._v("HTTP/2 虽然通过多个请求复用一个 TCP 连接解决了 HTTP 的队头阻塞 ，但是"),_("strong",[v._v("一旦发生丢包，就会阻塞住所有的 HTTP 请求")]),v._v("，这属于 TCP 层队头阻塞。")])]),v._v(" "),_("p",[v._v("HTTP/2 队头阻塞的问题是因为 TCP，所以 "),_("strong",[v._v("HTTP/3 把 HTTP 下层的 TCP 协议改成了 UDP！")])]),v._v(" "),_("p",[v._v("**UDP 发送是不管顺序，也不管丢包的。**所以不会出现像 HTTP/2 队头阻塞的问题。")]),v._v(" "),_("p",[v._v("大家都知道 UDP 是不可靠传输的，但基于 UDP 的 "),_("strong",[v._v("QUIC 协议")]),v._v(" 可以实现类似 TCP 的可靠性传输。")]),v._v(" "),_("p",[v._v("QUIC 有以下 3 个特点。")]),v._v(" "),_("ul",[_("li",[v._v("无队头阻塞")]),v._v(" "),_("li",[v._v("更快的连接建立")]),v._v(" "),_("li",[v._v("连接迁移")])]),v._v(" "),_("p",[_("em",[v._v("1、无队头阻塞")])]),v._v(" "),_("p",[v._v("QUIC 协议也有类似 HTTP/2 Stream 与多路复用的概念，也是可以在同一条连接上并发传输多个 Stream，Stream 可以认为就是一条 HTTP 请求。")]),v._v(" "),_("p",[v._v("QUIC 有自己的一套机制可以保证传输的可靠性的。"),_("strong",[v._v("当某个流发生丢包时，只会阻塞这个流，其他流不会受到影响，因此不存在队头阻塞问题")]),v._v("。这与 HTTP/2 不同，HTTP/2 只要某个流中的数据包丢失了，其他流也会因此受影响。")]),v._v(" "),_("p",[v._v("所以，QUIC 连接上的多个 Stream 之间并没有依赖，都是独立的，某个流发生丢包了，只会影响该流，其他流不受影响。")]),v._v(" "),_("p",[_("em",[v._v("2、更快的连接建立")])]),v._v(" "),_("p",[v._v("对于 HTTP/1 和 HTTP/2 协议，TCP 和 TLS 是分层的，分别属于内核实现的传输层、openssl 库实现的表示层，因此它们难以合并在一起，需要分批次来握手，先 TCP 握手，再 TLS 握手。")]),v._v(" "),_("p",[v._v("HTTP/3 在传输数据前虽然需要 QUIC 协议握手，这个握手过程只需要 1 RTT，握手的目的是为确认双方的「连接 ID」，连接迁移就是基于连接 ID 实现的。")]),v._v(" "),_("p",[v._v("但是 HTTP/3 的 QUIC 协议并不是与 TLS 分层，而是QUIC 内部包含了 TLS，它在自己的帧会携带 TLS 里的“记录”，再加上 QUIC 使用的是 TLS/1.3，因此仅需 1 个 RTT 就可以「同时」完成建立连接与密钥协商，如下图：")]),v._v(" "),_("p",[v._v("甚至，在第二次连接的时候，应用数据包可以和 QUIC 握手信息（连接信息 + TLS 信息）一起发送，达到 0-RTT 的效果。")]),v._v(" "),_("p",[v._v("如下图右边部分，HTTP/3 当会话恢复时，有效负载数据与第一个数据包一起发送，可以做到 0-RTT（下图的右下角）：")]),v._v(" "),_("p",[_("em",[v._v("3、连接迁移")])]),v._v(" "),_("p",[v._v("基于 TCP 传输协议的 HTTP 协议，由于是通过四元组（源 IP、源端口、目的 IP、目的端口）确定一条 TCP 连接。")]),v._v(" "),_("p",[v._v("那么"),_("strong",[v._v("当移动设备的网络从 4G 切换到 WIFI 时，意味着 IP 地址变化了，那么就必须要断开连接，然后重新建立连接")]),v._v("。而建立连接的过程包含 TCP 三次握手和 TLS 四次握手的时延，以及 TCP 慢启动的减速过程，给用户的感觉就是网络突然卡顿了一下，因此连接的迁移成本是很高的。")]),v._v(" "),_("p",[v._v("而 QUIC 协议没有用四元组的方式来 “绑定” 连接，而是通过"),_("strong",[v._v("连接 ID")]),v._v("来标记通信的两个端点，客户端和服务器可以各自选择一组 ID 来标记自己，因此即使移动设备的网络变化后，导致 IP 地址变化了，只要仍保有上下文信息（比如连接 ID、TLS 密钥等），就可以“无缝”地复用原连接，消除重连的成本，没有丝毫卡顿感，达到了"),_("strong",[v._v("连接迁移")]),v._v("的功能。")]),v._v(" "),_("p",[v._v("所以， QUIC 是一个在 UDP 之上的"),_("strong",[v._v("伪")]),v._v(" TCP + TLS + HTTP/2 的多路复用的协议。")]),v._v(" "),_("p",[v._v("QUIC 是新协议，对于很多网络设备，根本不知道什么是 QUIC，只会当做 UDP，这样会出现新的问题，因为有的网络设备是会丢掉 UDP 包的，而 QUIC 是基于UDP 实现的，那么如果网络设备无法识别这个是 QUIC 包，那么就会当作 UDP包，然后被丢弃。")]),v._v(" "),_("h2",{attrs:{id:"http-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-2"}},[v._v("#")]),v._v(" HTTP/2")]),v._v(" "),_("p",[v._v("HTTP/2 升级后的四大特性")]),v._v(" "),_("ul",[_("li",[v._v("头部压缩")]),v._v(" "),_("li",[v._v("二进制帧")]),v._v(" "),_("li",[v._v("并发传输")]),v._v(" "),_("li",[v._v("服务器主动推送资源")])]),v._v(" "),_("h3",{attrs:{id:"http-1-1的性能问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-1-1的性能问题"}},[v._v("#")]),v._v(" HTTP/1.1的性能问题")]),v._v(" "),_("p",[v._v("HTTP/1.1有高延迟的问题")]),v._v(" "),_("p",[v._v("现在的站点相比以前变化太多了，比如：")]),v._v(" "),_("ul",[_("li",[_("em",[v._v("消息的大小变大了")]),v._v("，从几 KB 大小的消息，到几 MB 大小的消息；")]),v._v(" "),_("li",[_("em",[v._v("页面资源变多了")]),v._v("，从每个页面不到 10 个的资源，到每页超 100 多个资源；")]),v._v(" "),_("li",[_("em",[v._v("内容形式变多样了")]),v._v("，从单纯到文本内容，到图片、视频、音频等内容；")]),v._v(" "),_("li",[_("em",[v._v("实时性要求变高了")]),v._v("，对页面的实时性要求的应用越来越多；")])]),v._v(" "),_("p",[v._v("主要原因如下几个：")]),v._v(" "),_("ul",[_("li",[_("em",[v._v("延迟难以下降")]),v._v("，虽然现在网络的「带宽」相比以前变多了，但是延迟降到一定幅度后，就很难再下降了，说白了就是到达了延迟的下限；")]),v._v(" "),_("li",[_("em",[v._v("并发连接有限")]),v._v("，谷歌浏览器最大并发连接数是 6 个，而且每一个连接都要经过 TCP 和 TLS 握手耗时，以及 TCP 慢启动过程给流量带来的影响；")]),v._v(" "),_("li",[_("em",[v._v("队头阻塞问题")]),v._v("，同一连接只能在完成一个 HTTP 事务（请求和响应）后，才能处理下一个事务；")]),v._v(" "),_("li",[_("em",[v._v("HTTP 头部巨大且重复")]),v._v("，由于 HTTP 协议是无状态的，每一个请求都得携带 HTTP 头部，特别是对于有携带 cookie 的头部，而 cookie 的大小通常很大；")]),v._v(" "),_("li",[_("em",[v._v("不支持服务器推送消息")]),v._v("，因此当客户端需要获取通知时，只能通过定时器不断地拉取消息，这无疑浪费大量了带宽和服务器资源。")])]),v._v(" "),_("h3",{attrs:{id:"兼容http-1-1"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#兼容http-1-1"}},[v._v("#")]),v._v(" 兼容HTTP/1.1")]),v._v(" "),_("p",[v._v("第一点，HTTP/2 没有在 URI 里引入新的协议名，仍然用「http://」表示明文协议，用「https://」表示加密协议，于是只需要浏览器和服务器在背后自动升级协议，这样可以让用户意识不到协议的升级，很好的实现了协议的平滑升级。")]),v._v(" "),_("p",[v._v("第二点，只在应用层做了改变，还是基于 TCP 协议传输，应用层方面为了保持功能上的兼容，HTTP/2 把 HTTP 分解成了「语义」和「语法」两个部分，「语义」层不做改动，与 HTTP/1.1 完全一致，比如请求方法、状态码、头字段等规则保留不变。")]),v._v(" "),_("p",[v._v("但是，HTTP/2 在「语法」层面做了很多改造，基本改变了 HTTP 报文的传输格式。")]),v._v(" "),_("h3",{attrs:{id:"头部压缩"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#头部压缩"}},[v._v("#")]),v._v(" 头部压缩")]),v._v(" "),_("p",[v._v("HTTP 协议的报文是由「Header + Body」构成的。")]),v._v(" "),_("p",[v._v("对于 Body 部分，HTTP/1.1 协议可以使用头字段 「Content-Encoding」指定 Body 的压缩方式，比如用 gzip 压缩，这样可以节约带宽。")]),v._v(" "),_("p",[v._v("但报文中的另外一部分 Header，是没有针对它的优化手段。")]),v._v(" "),_("p",[v._v("HTTP/1.1 报文中 Header 部分存在的问题：")]),v._v(" "),_("ul",[_("li",[v._v("含很多固定的字段，比如Cookie、User Agent、Accept 等，这些字段加起来也高达几百字节甚至上千字节，所以有必要"),_("strong",[v._v("压缩")]),v._v("；")]),v._v(" "),_("li",[v._v("大量的请求和响应的报文里有很多字段值都是重复的，这样会使得大量带宽被这些冗余的数据占用了，所以有必须要"),_("strong",[v._v("避免重复性")]),v._v("；")]),v._v(" "),_("li",[v._v("字段是 ASCII 编码的，虽然易于人类观察，但效率低，所以有必要改成"),_("strong",[v._v("二进制编码")]),v._v("；")])]),v._v(" "),_("p",[v._v("HTTP/2 对 Header 部分做了大改造，把以上的问题都解决了。")]),v._v(" "),_("p",[v._v("HTTP/2 没使用常见的 gzip 压缩方式来压缩头部，而是开发了 "),_("strong",[v._v("HPACK")]),v._v(" 算法，HPACK 算法主要包含三个组成部分：")]),v._v(" "),_("ul",[_("li",[v._v("静态字典；")]),v._v(" "),_("li",[v._v("动态字典；")]),v._v(" "),_("li",[v._v("Huffman 编码（压缩算法）；")])]),v._v(" "),_("h3",{attrs:{id:"hpack实现原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#hpack实现原理"}},[v._v("#")]),v._v(" Hpack实现原理")]),v._v(" "),_("p",[v._v("客户端和服务器两端都会建立和维护「"),_("strong",[v._v("字典")]),v._v("」，用长度较小的索引号表示重复的字符串，再用 Huffman 编码压缩数据，"),_("strong",[v._v("可达到 50%~90% 的高压缩率")]),v._v("。")]),v._v(" "),_("h4",{attrs:{id:"静态表编码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#静态表编码"}},[v._v("#")]),v._v(" 静态表编码")]),v._v(" "),_("p",[v._v("HTTP/2 为高频出现在头部的字符串和字段建立了一张"),_("strong",[v._v("静态表")]),v._v("，它是写入到 HTTP/2 框架里的，不会变化的")]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[v._v("  +-------+-----------------------------+---------------+\n  | Index | Header Name                 | Header Value  |\n  +-------+-----------------------------+---------------+\n  | 1     | :authority                  |               |\n  | 2     | :method                     | GET           |\n  | 3     | :method                     | POST          |\n  | 4     | :path                       | /             |\n  | 5     | :path                       | /index.html   |\n  | 6     | :scheme                     | http          |\n  | 7     | :scheme                     | https         |\n  | 8     | :status                     | 200           |\n  | 9     | :status                     | 204           |\n  | 10    | :status                     | 206           |\n  | 11    | :status                     | 304           |\n  | 12    | :status                     | 400           |\n  | 13    | :status                     | 404           |\n  | 14    | :status                     | 500           |\n  | 15    | accept-charset              |               |\n  | 16    | accept-encoding             | gzip, deflate |\n  | 17    | accept-language             |               |\n  | 18    | accept-ranges               |               |\n  | 19    | accept                      |               |\n  | 20    | access-control-allow-origin |               |\n  | 21    | age                         |               |\n  | 22    | allow                       |               |\n  | 23    | authorization               |               |\n  | 24    | cache-control               |               |\n  | 25    | content-disposition         |               |\n  | 26    | content-encoding            |               |\n  | 27    | content-language            |               |\n  | 28    | content-length              |               |\n  | 29    | content-location            |               |\n  | 30    | content-range               |               |\n  | 31    | content-type                |               |\n  | 32    | cookie                      |               |\n  | 33    | date                        |               |\n  | 34    | etag                        |               |\n  | 35    | expect                      |               |\n  | 36    | expires                     |               |\n  | 37    | from                        |               |\n  | 38    | host                        |               |\n  | 39    | if-match                    |               |\n  | 40    | if-modified-since           |               |\n  | 41    | if-none-match               |               |\n  | 42    | if-range                    |               |\n  | 43    | if-unmodified-since         |               |\n  | 44    | last-modified               |               |\n  | 45    | link                        |               |\n  | 46    | location                    |               |\n  | 47    | max-forwards                |               |\n  | 48    | proxy-authenticate          |               |\n  | 49    | proxy-authorization         |               |\n  | 50    | range                       |               |\n  | 51    | referer                     |               |\n  | 52    | refresh                     |               |\n  | 53    | retry-after                 |               |\n  | 54    | server                      |               |\n  | 55    | set-cookie                  |               |\n  | 56    | strict-transport-security   |               |\n  | 57    | transfer-encoding           |               |\n  | 58    | user-agent                  |               |\n  | 59    | vary                        |               |\n  | 60    | via                         |               |\n  | 61    | www-authenticate            |               |\n  +-------+-----------------------------+---------------+\n")])])]),_("h4",{attrs:{id:"动态表编码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#动态表编码"}},[v._v("#")]),v._v(" 动态表编码")]),v._v(" "),_("p",[v._v("静态表只包含了 61 种高频出现在头部的字符串，不在静态表范围内的头部字符串就要自行构建"),_("strong",[v._v("动态表")]),v._v("，它的 Index 从 "),_("code",[v._v("62")]),v._v(" 起步，会在编码解码的时候随时更新。")]),v._v(" "),_("p",[v._v("比如，第一次发送时头部中的「"),_("code",[v._v("user-agent")]),v._v(" 」字段数据有上百个字节，经过 Huffman 编码发送出去后，客户端和服务器双方都会更新自己的动态表，添加一个新的 Index 号 62。"),_("strong",[v._v("那么在下一次发送的时候，就不用重复发这个字段的数据了，只用发 1 个字节的 Index 号就好了，因为双方都可以根据自己的动态表获取到字段的数据")]),v._v("。")]),v._v(" "),_("p",[v._v("所以，使得动态表生效有一个前提："),_("strong",[v._v("必须同一个连接上，重复传输完全相同的 HTTP 头部")]),v._v("。如果消息字段在 1 个连接上只发送了 1 次，或者重复传输时，字段总是略有变化，动态表就无法被充分利用了。")]),v._v(" "),_("p",[v._v("因此，随着在同一 HTTP/2 连接上发送的报文越来越多，客户端和服务器双方的「字典」积累的越来越多，理论上最终每个头部字段都会变成 1 个字节的 Index，这样便避免了大量的冗余数据的传输，大大节约了带宽。")]),v._v(" "),_("p",[v._v("理想很美好，现实很骨感。动态表越大，占用的内存也就越大，如果占用了太多内存，是会影响服务器性能的，因此 Web 服务器都会提供类似 "),_("code",[v._v("http2_max_requests")]),v._v(" 的配置，用于限制一个连接上能够传输的请求数量，避免动态表无限增大，请求数量到达上限后，就会关闭 HTTP/2 连接来释放内存。")]),v._v(" "),_("p",[_("em",[_("em",[v._v("动态表的大小 = （每个 Header 的字节数的和 + 32）")]),v._v(" 键值对个数")]),v._v("*")]),v._v(" "),_("p",[v._v("综上，HTTP/2 头部的编码通过「静态表、动态表、Huffman 编码」共同完成的。")]),v._v(" "),_("h4",{attrs:{id:"表的索引概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#表的索引概念"}},[v._v("#")]),v._v(" 表的索引概念")]),v._v(" "),_("p",[v._v("hpack编码后的数据成分可以拆分成一下几个部分：")]),v._v(" "),_("ol",[_("li",[v._v("操作码")]),v._v(" "),_("li",[v._v("在表中的索引（这个索引可能是hearder中key值的索引，也可能是整个键值对的索引）")]),v._v(" "),_("li",[v._v("是否使用哈夫曼编码")]),v._v(" "),_("li",[v._v("key的长度")]),v._v(" "),_("li",[v._v("key的编码")]),v._v(" "),_("li",[v._v("value的长度")]),v._v(" "),_("li",[v._v("value的编码")])]),v._v(" "),_("p",[v._v("上述的七个部分中不是每一个部分都能用得到，比如表中的索引若是已经存在的话，那么key的长度以及编码部分的内容就不需要编码传输了，可以直接在索引表中取得。")]),v._v(" "),_("h3",{attrs:{id:"二进制帧"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二进制帧"}},[v._v("#")]),v._v(" 二进制帧")]),v._v(" "),_("p",[v._v("HTTP/2 厉害的地方在于将 HTTP/1 的文本格式改成二进制格式传输数据，极大提高了 HTTP 传输效率，而且二进制数据使用位运算能高效解析。")]),v._v(" "),_("p",[v._v("HTTP/2 把响应报文划分成了两类"),_("strong",[v._v("帧（*Frame*）")]),v._v("，图中的 HEADERS（首部）和 DATA（消息负载） 是帧的类型，也就是说一条 HTTP 响应，划分成了两类帧来传输，并且采用二进制来编码。")]),v._v(" "),_("p",[v._v("比如状态码 200")]),v._v(" "),_("p",[v._v("在 HTTP/1.1 是用 '2''0''0' 三个字符来表示（二进制：00110010 00110000 00110000），共用了 3 个字节。")]),v._v(" "),_("p",[v._v("在 HTTP/2 对于状态码 200 的二进制编码是 10001000，只用了 1 字节就能表示，相比于 HTTP/1.1 节省了 2 个字节")]),v._v(" "),_("h3",{attrs:{id:"并发传输"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#并发传输"}},[v._v("#")]),v._v(" 并发传输")]),v._v(" "),_("p",[v._v("知道了 HTTP/2 的帧结构后，我们再来看看它是如何实现"),_("strong",[v._v("并发传输")]),v._v("的。")]),v._v(" "),_("p",[v._v("我们都知道 HTTP/1.1 的实现是基于请求-响应模型的。同一个连接中，HTTP 完成一个事务（请求与响应），才能处理下一个事务，也就是说在发出请求等待响应的过程中，是没办法做其他事情的，如果响应迟迟不来，那么后续的请求是无法发送的，也造成了"),_("strong",[v._v("队头阻塞")]),v._v("的问题。")]),v._v(" "),_("p",[v._v("而 HTTP/2 就很牛逼了，通过 Stream 这个设计，"),_("strong",[v._v("多个 Stream 复用一条 TCP 连接，达到并发的效果")]),v._v("，解决了 HTTP/1.1 队头阻塞的问题，提高了 HTTP 传输的吞吐量。")]),v._v(" "),_("h3",{attrs:{id:"服务器主动推送资源"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#服务器主动推送资源"}},[v._v("#")]),v._v(" 服务器主动推送资源")]),v._v(" "),_("p",[v._v("客户端发起的请求，必须使用的是奇数号 Stream，服务器主动的推送，使用的是偶数号 Stream。服务器在推送资源时，会通过 "),_("code",[v._v("PUSH_PROMISE")]),v._v(" 帧传输 HTTP 头部，并通过帧中的 "),_("code",[v._v("Promised Stream ID")]),v._v(" 字段告知客户端，接下来会在哪个偶数号 Stream 中发送包体。")])])}),[],!1,null,null,null);_.default=e.exports}}]);